SPP(4P)								       SPP(4P)



NNAAMMEE
       spp - Xerox Sequenced Packet Protocol

SSYYNNOOPPSSIISS
       ##iinncclluuddee	<<ssyyss//ssoocckkeett..hh>>
       ##iinncclluuddee	<<nneettnnss//nnss..hh>>
       ss == ssoocckkeett((AAFF__NNSS,, SSOOCCKK__SSTTRREEAAMM,, 00));;

       ##iinncclluuddee	<<nneettnnss//sspp..hh>>
       ss == ssoocckkeett((AAFF__NNSS,, SSOOCCKK__SSEEQQPPAACCKKEETT,, 00));;

DDEESSCCRRIIPPTTIIOONN
       The  SPP	protocol provides reliable, flow-controlled, two-way transmis-
       sion of data.  It  is  a	 byte-stream  protocol	used  to  support  the
       SOCK_STREAM abstraction.	 SPP uses the standard NS(tm) address formats.

       Sockets	utilizing  the	SPP protocol are either	"active" or "passive".
       Active sockets initiate connections to passive sockets.	By default SPP
       sockets	are  created  active; to create	a passive socket the _l_i_s_t_e_n(2)
       system call must	be used	after binding the socket with the _b_i_n_d(2) sys-
       tem  call.   Only  passive sockets may use the _a_c_c_e_p_t(2)	call to	accept
       incoming	connections.  Only active sockets may use the _c_o_n_n_e_c_t(2)  call
       to initiate connections.

       Passive	sockets	 may  "underspecify"  their location to	match incoming
       connection requests from	multiple  networks.   This  technique,	termed
       "wildcard  addressing",	allows	a  single server to provide service to
       clients on multiple networks.  To create	a socket which listens on  all
       networks, the NS	address	of all zeroes must be bound.  The SPP port may
       still be	specified at this time;	if the port is not specified the  sys-
       tem  will  assign  one.	 Once  a  connection  has been established the
       socket's	address	is fixed by the	peer entity's location.	  The  address
       assigned	 the  socket is	the address associated with the	network	inter-
       face through which packets are being transmitted	 and  received.	  Nor-
       mally this address corresponds to the peer entity's network.

       If  the	SOCK_SEQPACKET	socket type is specified, each packet received
       has the actual 12 byte sequenced	packet header left  for	 the  user  to
       inspect:
       struct sphdr {
	    u_char	   sp_cc;	  /* _c_o_n_n_e_c_t_i_o_n	_c_o_n_t_r_o_l	*/
       #define	 SP_EM	   0x10		  /* _e_n_d _o_f _m_e_s_s_a_g_e */
	    u_char	   sp_dt;	  /* _d_a_t_a_s_t_r_e_a_m	_t_y_p_e */
	    u_short	   sp_sid;
	    u_short	   sp_did;
	    u_short	   sp_seq;
	    u_short	   sp_ack;
	    u_short	   sp_alo;
       };
       This  facilitates  the  implementation  of higher level Xerox protocols
       which make use of the data stream type field and	 the  end  of  message
       bit.   Conversely, the user is required to supply a 12 byte header, the
       only part of which inspected is the data	stream type and	end of message
       fields.

       For  either  socket  type, packets received with	the Attention bit sent
       are interpreted as out of band data.  Data  sent	 with  send(...,  ...,
       ..., MSG_OOB) cause the attention bit to	be set.

DDIIAAGGNNOOSSTTIICCSS
       A socket	operation may fail with	one of the following errors returned:

       [EISCONN]	   when	 trying	 to establish a	connection on a	socket
			   which already has one;

       [ENOBUFS]	   when	the system runs	out of memory for an  internal
			   data	structure;

       [ETIMEDOUT]	   when	 a  connection	was  dropped  due to excessive
			   retransmissions;

       [ECONNRESET]	   when	the remote peer	forces the  connection	to  be
			   closed;

       [ECONNREFUSED]	   when	 the  remote  peer actively refuses connection
			   establishment (usually because no process  is  lis-
			   tening to the port);

       [EADDRINUSE]	   when	 an  attempt is	made to	create a socket	with a
			   port	which has already been allocated;

       [EADDRNOTAVAIL]	   when	an attempt is made to create a socket  with  a
			   network  address  for  which	 no  network interface
			   exists.

SSOOCCKKEETT OOPPTTIIOONNSS
       SO_DEFAULT_HEADERS  when	set, this determines the data stream type  and
			   whether  the	 end  of  message  bit is to be	set on
			   every ensuing packet.

       SO_MTU		   This	specifies the maximum ammount of user data  in
			   a  single  packet.	The  default  is  576  bytes -
			   sizeof(struct spidp).  This quantity	 affects  win-
			   dowing  --  increasing  it  without	increasing the
			   amount of buffering in the socket  will  lower  the
			   number of unread packets accepted.  Anything	larger
			   than	the default will not be	forwarded  by  a  bona
			   fide	 XEROX	product	internetwork router.  The data
			   argument  for  the  setsockopt  call	 must  be   an
			   unsigned short.

SSEEEE AALLSSOO
       intro(4N), ns(4F)

BBUUGGSS
       There should be some way	to reflect record boundaries in	a stream.  For
       stream mode, there should be an option to get the data stream  type  of
       the record the user process is about to receive.



4.3 Berkeley Distribution	 July 30, 1985			       SPP(4P)
