RK(4)			   Kernel Interfaces Manual			 RK(4)



NNAAMMEE
       rk - RK-11/RK05 disk

SSYYNNOOPPSSIISS
       //ssyyss//ccoonnff//SSYYSSTTEEMM::
	    NNRRKK	 _r_k___d_r_i_v_e_s ## RRKK0055

       //eettcc//ddttaabb::
	    ##NNaammee UUnniitt##	AAddddrr   VVeeccttoorr BBrr HHaannddlleerr((ss))	 ## CCoommmmeennttss
	    rrkk	  ??	117777440000 222200    55	 rrkkiinnttrr		 ## rrkk0055

       mmaajjoorr ddeevviiccee nnuummbbeerr((ss))::
	    rraaww:: 1155
	    bblloocckk:: 66
       mmiinnoorr ddeevviiccee eennccooddiinngg::
	    ssppeecciiffiieess ddrriivvee:: <<rrkk__ddrriivvee>>

DDEESSCCRRIIPPTTIIOONN
       Minor device numbers are	drive numbers on one controller.  The standard
       device names begin with ``rk'' followed by the drive  number  and  then
       the  letter "h".	 The character ? stands	here for a drive number	in the
       range 0-7.

       The block files access the disk via the system's	normal buffering mech-
       anism  and  may	be  read  and  written without regard to physical disk
       records.	 There is also a `raw' interface  which	 provides  for	direct
       transmission  between  the disk and the user's read or write buffer.  A
       single read or write call results in  exactly  one  I/O	operation  and
       therefore  raw  I/O  is considerably more efficient when	many words are
       transmitted.  The names of the raw files	conventionally begin  with  an
       extra `r.'

       In  raw I/O the buffer must begin on a word (even) boundary, and	counts
       should be a multiple of 512 bytes (a disk sector).  Likewise _s_e_e_k calls
       should specify a	multiple of 512	bytes.

DDIISSKK SSUUPPPPOORRTT
       The  _r_k	driver	does not support pseudo-disks (partitions).  Each file
       _r_k_?_h refers to the entire drive	as  a  single  sequentially  addressed
       file.  Each drive has 4872 512-byte blocks.

       It's  not  clear	 what one would	do with	one of these drives if one had
       one ...

FFIILLEESS
       /dev/rk[0-7]h	   block files
       /dev/rrk[0-7]h	   raw files
       /dev/MAKEDEV	   script to create special files
       /dev/MAKEDEV.local  script to localize special files

SSEEEE AALLSSOO
       hk(4), ra(4), ram(4), rl(4), rp(4), rx(4), si(4), xp(4),	dtab(5), auto-
       config(8)

DDIIAAGGNNOOSSTTIICCSS
       rrkk%%dd::  hhaarrdd  eerrrroorr  ssnn%%dd	 eerr==%%bb ddss==%%bb.  An unrecoverable	error occurred
       during transfer of the specified	sector of  the	specified  disk.   The
       contents	 of the	two error registers are	also printed in	octal and sym-
       bolically with bits decoded.  The error was either unrecoverable, or  a
       large number of retry attempts could not	recover	the error.

       rrkk%%dd:: wwrriittee lloocckkeedd.  The	write protect switch was set on	the drive when
       a write was attempted.  The write operation is not recoverable.

BBUUGGSS
       In raw I/O _r_e_a_d and _w_r_i_t_e(2) truncate file offsets  to  512-byte	 block
       boundaries,  and	 _w_r_i_t_e	scribbles  on  the  tail of incomplete blocks.
       Thus, in	programs that are likely to access raw	devices,  _r_e_a_d_,	 _w_r_i_t_e
       and _l_s_e_e_k(2) should always deal in 512-byte multiples.

       DEC-standard error logging should be supported.

       A  program to analyze the logged	error information (even	in its present
       reduced form) is	needed.



3rd Berkeley Distribution	August 20, 1987				 RK(4)
