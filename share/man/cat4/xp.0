XP(4)			   Kernel Interfaces Manual			 XP(4)



NNAAMMEE
       xp - generic SMD	moving-head disk

SSYYNNOOPPSSIISS
       //ssyyss//ccoonnff//SSYYSSTTEEMM::
	    NNXXPPCC    _x_p___c_o_n_t_r_o_l_l_e_r_s ## NNuummbbeerr ooff ccoonnttrroolllleerrss
	    NNXXPPDD    _x_p___d_r_i_v_e_s	   ## RRMM0022//0033//0055,, RRPP0044//0055//0066,,
				   ## CCDDCC 99776666,, FFuujjii 116600,, eettcc..
	    BBAADDSSEECCTT _N_O		   ## BBaadd sseeccttoorr	hhaannddlliinngg ((sseeee BBUUGGSS))

       //eettcc//ddttaabb::
	    ##NNaammee UUnniitt##	AAddddrr   VVeeccttoorr BBrr HHaannddlleerr((ss))	 ## CCoommmmeennttss
	    xxpp	  ??	117766770000 225544    55	 xxppiinnttrr		 ## xxpp ddrriivveerr

       mmaajjoorr ddeevviiccee nnuummbbeerr((ss))::
	    rraaww:: 1199
	    bblloocckk:: 1100
       mmiinnoorr ddeevviiccee eennccooddiinngg::
	    bbiittss 00000077 ssppeecciiffyy ppaarrttiittiioonn	ooff XXPP ddrriivvee
	    bbiittss 00337700 ssppeecciiffyy XXPP ddrriivvee

DDEESSCCRRIIPPTTIIOONN
       The  _x_p	driver is a generic SMD	storage	module disk driver.  It	can be
       adapted to most SMD controllers although	bootstrapping will not	neces-
       sarily  be  directly  possible.	The drives are numbered	from 0 to _n on
       controller 0, from _n+1 to _m on controller 1, etc.  The drives may  have
       different geometries.

       The  _x_p	driver	is  unique  amoungst  2BSD drivers in its numbering of
       drives.	Other drivers (_r_a for example) number drives 0 thru 7 on  con-
       troller	1,  8 thru 15 on controller 2 and so on.  _x_p on	the other hand
       can have	drives 0 and 1 on controller 1,	drives 2, 3, 4 and 5  on  con-
       troller	2  and	drives	6, 7 and 8 on controller 3.  This is different
       from bboooott's view	of the world, so if you	are booting  from  other  than
       unit 0 you may have to experiment a bit.

       Files  with  minor device numbers 0 through 7 refer to various portions
       of drive	0; minor devices 8 through 15 refer  to	 drive	1,  etc.   The
       standard	 device	 names	begin with ``xp'' followed by the drive	number
       and then	a letter a-h for partitions 0-7	respectively.  The character ?
       stands here for a drive number in the range 0-7.

       The block files access the disk via the system's	normal buffering mech-
       anism and may be	read and  written  without  regard  to	physical  disk
       records.	  There	 is  also  a `raw' interface which provides for	direct
       transmission between the	disk and the user's read or write  buffer.   A
       single  read  or	 write	call  results in exactly one I/O operation and
       therefore raw I/O is considerably more efficient	when  many  words  are
       transmitted.   The  names of the	raw files conventionally begin with an
       extra `r.'

       In raw I/O the buffer must begin	on a word (even) boundary, and	counts
       should  be  a  multiple	of  512	bytes (a disk sector).	Likewise _l_s_e_e_k
       calls should specify a multiple of 512 bytes.

DDIISSKK SSUUPPPPOORRTT
       Disks must be labeled using either the standalone _d_i_s_k_l_a_b_e_l program  on
       the  boot  tape or with the _d_i_s_k_l_a_b_e_l(8)	program.  The kernel no	longer
       attempts	to determine the drive type and	geometry, instead reading this
       information  from  the  disklabel.  There are no	partition tables coded
       into the	_x_p driver, these must be placed	on the drive with _d_i_s_k_l_a_b_e_l.

       Special files should only be created for	the partitions that are	 actu-
       ally  used,  as	the overlap in these addresses could lead to confusion
       otherwise.  Traditionally the xp?a partition is normally	used  for  the
       root  file system, the xp?b partition as	a swap area, and the xp?c par-
       tition for pack-pack copying (it	maps the entire	disk).

FFIILLEESS
       /dev/xp[0-7][a-h]   block files
       /dev/rxp[0-7][a-h]  raw files
       /dev/MAKEDEV	   script to create special files
       /dev/MAKEDEV.local  script to localize special files

SSEEEE AALLSSOO
       hk(4), ra(4), ram(4), rk(4), rl(4), rp(4), rx(4), si(4),	dtab(5), auto-
       config(8), newfs(8)

DDIIAAGGNNOOSSTTIICCSS
       xxpp%%dd%%cc:: hhaarrdd eerrrroorr ssnn%%dd ccss22==%%bb eerr11==%%bb.  An unrecoverable	error occurred
       during transfer of the specified	sector of the  specified  disk	parti-
       tion.   The  contents  of  the  two error registers are also printed in
       octal and symbolically with bits	decoded.  The error was	 either	 unre-
       coverable,  or a	large number of	retry attempts (including offset posi-
       tioning and drive recalibration)	could not recover the error.

       xxpp%%dd:: wwrriittee lloocckkeedd.  The	write protect switch was set on	the drive when
       a write was attempted.  The write operation is not recoverable.

       xxpp%%dd%%cc::	ssoofftt eecccc ssnn%%dd.	A recoverable ECC error	occurred on the	speci-
       fied sector of the specified disk partition.  This happens  normally  a
       few  times a week.  If it happens more frequently than this the sectors
       where the errors	are occurring should be	 checked  to  see  if  certain
       cylinders  on the pack, spots on	the carriage of	the drive or heads are
       indicated.

       xxpp%%dd:: uunnkknnoowwnn ddeevviiccee ttyyppee 00%%oo.  The number in the  drive's  drive  type
       register	is unknown to the xp driver.

BBUUGGSS
       In  raw	I/O  _r_e_a_d and _w_r_i_t_e(2) truncate	file offsets to	512-byte block
       boundaries, and _w_r_i_t_e scribbles	on  the	 tail  of  incomplete  blocks.
       Thus,  in  programs  that are likely to access raw devices, _r_e_a_d_, _w_r_i_t_e
       and _l_s_e_e_k(2) should always deal in 512-byte multiples.

       DEC-standard error logging should be supported.

       The kernel uses partition 'h' to	access the badblock information.  This
       should have been	'c' except that	almost all of the /etc/disktab entries
       (and thus existing systems) use 'h' for this purpose.  Unless  you  are
       very careful with _d_i_s_k_l_a_b_e_l|(8) (to make	certain	that no	data partition
       overlaps	the badblock area) you should probably leave BADSECT undefined
       in the kernel config file.



3rd Berkeley Distribution	August 14, 1995				 XP(4)
