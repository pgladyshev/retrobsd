TTY(4)			   Kernel Interfaces Manual			TTY(4)



NNAAMMEE
       tty - general terminal interface

SSYYNNOOPPSSIISS
       ##iinncclluuddee	<<ssggttttyy..hh>>

DDEESSCCRRIIPPTTIIOONN
       This  section describes both a particular special file //ddeevv//ttttyy and the
       terminal	drivers	used for conversational	computing.

       LLiinnee ddiisscciipplliinneess..

       The system provides different _l_i_n_e _d_i_s_c_i_p_l_i_n_e_s for controlling communi-
       cations lines.  In this version of the system there are two disciplines
       available for use with terminals:

       old     The old (Version	7) terminal driver.  This  is  sometimes  used
	       when using the standard shell _s_h(1).

       new     The  standard  Berkeley	terminal driver, with features for job
	       control;	this must be used when using _c_s_h(1).

       Line discipline switching is accomplished with the TIOCSETD _i_o_c_t_l:

	      iinntt llddiisscc	== LLDDIISSCC;;
	      iiooccttll((ff,, TTIIOOCCSSEETTDD,, &&llddiisscc));;

       where LDISC is OTTYDISC for the standard	tty driver  and	 NTTYDISC  for
       the  ``new'' driver.  The standard (currently old) tty driver is	disci-
       pline 0 by convention.  Other disciplines may exist  for	 special  pur-
       poses,  such  as	 use  of communications	lines for network connections.
       The current line	discipline can be obtained with	 the  TIOCGETD	_i_o_c_t_l.
       Pending input is	discarded when the line	discipline is changed.

       All  of	the low-speed asynchronous communications ports	can use	any of
       the available line disciplines, no matter what  hardware	 is  involved.
       The  remainder  of  this	 section  discusses the	"old" and "new"	disci-
       plines.

       TThhee ccoonnttrrooll tteerrmmiinnaall..

       When a terminal file is opened, it causes the process to	wait  until  a
       connection  is  established.   In  practice,  user programs seldom open
       these files; they are opened by _g_e_t_t_y(8)	or _r_l_o_g_i_n_d(8C)	and  become  a
       user's standard input and output	file.

       If  a process which has no control terminal opens a terminal file, then
       that terminal file becomes the control terminal for that	process.   The
       control	terminal  is  thereafter inherited by a	child process during a
       _f_o_r_k(2),	even if	the control terminal is	closed.

       The file	//ddeevv//ttttyy is, in	each process, a	synonym	for a _c_o_n_t_r_o_l _t_e_r_m_i_n_a_l
       associated  with	 that process.	It is useful for programs that wish to
       be sure of writing messages on the terminal no matter  how  output  has
       been  redirected.   It can also be used for programs that demand	a file
       name for	output,	when typed output is desired and  it  is  tiresome  to
       find out	which terminal is currently in use.

       A process can remove the	association it has with	its controlling	termi-
       nal by opening the file //ddeevv//ttttyy	and issuing an

	      iiooccttll((ff,, TTIIOOCCNNOOTTTTYY,, 00));;

       This is often desirable in server processes.

       PPrroocceessss ggrroouuppss..

       Command processors such as _c_s_h(1) can arbitrate	the  terminal  between
       different  _j_o_b_s	by  placing related jobs in a single process group and
       associating this	process	group with the terminal.  A terminal's associ-
       ated process group may be set using the TIOCSPGRP _i_o_c_t_l(2):

	      iiooccttll((ffiillddeess,, TTIIOOCCSSPPGGRRPP,, &&ppggrrpp));;

       or examined using TIOCGPGRP, which returns the current process group in
       _p_g_r_p.  The new terminal driver aids in this arbitration by  restricting
       access  to  the	terminal  by  processes	 which	are not	in the current
       process group; see JJoobb aacccceessss ccoonnttrrooll below.

       MMooddeess..

       The terminal drivers have  three	 major	modes,	characterized  by  the
       amount of processing on the input and output characters:

       cooked	 The  normal  mode.  In	this mode lines	of input are collected
		 and input editing is done.  The edited	line is	made available
		 when it is completed by a newline, or when the	_t___b_r_k_c charac-
		 ter (normally undefined) or  _t___e_o_f_c  character	 (normally  an
		 EOT,  control-D, hereafter ^D)	is entered.  A carriage	return
		 is usually made synonymous with newline  in  this  mode,  and
		 replaced  with	 a  newline  whenever it is typed.  All	driver
		 functions (input editing, interrupt generation,  output  pro-
		 cessing  such	as tab expansion, etc.)	 are available in this
		 mode.

       CBREAK	 This mode eliminates the character, word,  and	 line  editing
		 input facilities, making the input character available	to the
		 user program as it is typed.  Flow control, literal-next  and
		 interrupt  processing	are  still  done in this mode.	Output
		 processing is done.

       RAW	 This mode eliminates all input	processing and makes all input
		 characters  available as they are typed; no output processing
		 is done either.

       The style of input processing can also be very different	when the  ter-
       minal  is  put in non-blocking I/O mode;	see the	FNDELAY	flag described
       in _f_c_n_t_l(2).  In	this case a _r_e_a_d(2) from  the  control	terminal  will
       never  block,  but  rather  return an error indication (EWOULDBLOCK) if
       there is	no input available.

       A process may also request that a SIGIO	signal	be  sent  it  whenever
       input  is  present  and also whenever output queues fall	below the low-
       water mark.  To enable this mode	the FASYNC flag	should	be  set	 using
       _f_c_n_t_l(2).

       IInnppuutt eeddiittiinngg..

       A  UNIX	terminal  ordinarily operates in full-duplex mode.  Characters
       may be typed at any time, even while output is occurring, and are  only
       lost  when  the	system's  character  input  buffers  become completely
       choked, which is	rare, or when the user	has  accumulated  the  maximum
       allowed	number of input	characters that	have not yet been read by some
       program.	 Currently this	limit is 256 characters.   In  RAW  mode,  the
       terminal	 driver	 throws	 away all input	and output without notice when
       the limit is reached.  In CBREAK	or cooked mode it  refuses  to	accept
       any  further input and, if in the new line discipline, rings the	termi-
       nal bell.

       Input characters	are normally accepted in either	 even  or  odd	parity
       with the	parity bit being stripped off before the character is given to
       the program.  By	clearing either	the EVEN or ODD	bit in the flags  word
       it is possible to have input characters with that parity	discarded (see
       the SSuummmmaarryy below.)

       In all of the line disciplines, it is  possible	to  simulate  terminal
       input  using the	TIOCSTI	_i_o_c_t_l, which takes, as its third argument, the
       address of a character.	The system pretends that  this	character  was
       typed  on  the  argument	 terminal,  which must be the control terminal
       except for the super-user (this call  is	 not  in  standard  version  7
       UNIX).

       Input characters	are normally echoed by putting them in an output queue
       as they arrive.	This may be disabled by	clearing the ECHO bit  in  the
       flags  word  using the _s_t_t_y(3C) call or the TIOCSETN or TIOCSETP	_i_o_c_t_ls
       (see the	SSuummmmaarryy	below).

       In cooked mode, terminal	input is processed in units of lines.  A  pro-
       gram attempting to read will normally be	suspended until	an entire line
       has been	received (but see the description of  SIGTTIN  in  JJoobb	aacccceessss
       ccoonnttrrooll	and  of	 FIONREAD in SSuummmmaarryy, both below.)  No matter how many
       characters are requested	in the read call, at most  one	line  will  be
       returned.   It is not, however, necessary to read a whole line at once;
       any number of characters	may be requested in a read, even one,  without
       losing information.

       During  input,  line editing is normally	done, with the erase character
       _s_g___e_r_a_s_e	(by default, DELETE)  logically	 erasing  the  last  character
       typed  and  the	_s_g___k_i_l_l	 character  (default, ^U: control-U) logically
       erasing the entire current input	line.  These  characters  never	 erase
       beyond the beginning of the current input line or an eof.

       The  drivers normally treat either a carriage return or a newline char-
       acter as	terminating an input line, replacing the return	with a newline
       and  echoing  a return and a line feed.	If the CRMOD bit is cleared in
       the local mode word then	the processing for  carriage  return  is  dis-
       abled,  and  it	is  simply  echoed as a	return,	and does not terminate
       cooked mode input.

       In the new driver there is a literal-next character (normally ^V) which
       can  be typed in	both cooked and	CBREAK mode preceding _a_n_y character to
       prevent its special meaning to the terminal handler.

       The new terminal	driver also provides two other editing	characters  in
       normal mode.  The word-erase character, normally	^W, erases the preced-
       ing word, but not any spaces before it.	For the	purposes of ^W,	a word
       is  defined as a	sequence of non-blank characters, with tabs counted as
       blanks.	Finally, the reprint character,	normally ^R, retypes the pend-
       ing  input  beginning  on a new line.  Retyping occurs automatically in
       cooked mode if characters which	would  normally	 be  erased  from  the
       screen are fouled by program output.

       IInnppuutt eecchhooiinngg aanndd rreeddiissppllaayy

       The  terminal driver has	several	modes for handling the echoing of ter-
       minal input, controlled by bits in a local mode word.

       _H_a_r_d_c_o_p_y	_t_e_r_m_i_n_a_l_s_.  When a hardcopy terminal is	in  use,  the  LPRTERA
       bit is normally set in the local	mode word.  Characters which are logi-
       cally erased are	then printed out backwards preceded by	`\'  and  fol-
       lowed by	`/' in this mode.

       _C_R_T  _t_e_r_m_i_n_a_l_s_.	 When a	CRT terminal is	in use,	the LCRTBS bit is nor-
       mally set in the	local mode word.  The terminal driver then echoes  the
       proper  number  of erase	characters when	input is erased; in the	normal
       case where the erase character is a ^H this causes the  cursor  of  the
       terminal	to back	up to where it was before the logically	erased charac-
       ter was typed.  If the input has	 become	 fouled	 due  to  interspersed
       asynchronous output, the	input is automatically retyped.

       _E_r_a_s_i_n_g	_c_h_a_r_a_c_t_e_r_s  _f_r_o_m  _a  _C_R_T_.   When a CRT terminal	is in use, the
       LCRTERA bit may be set to cause input to	be erased from the screen with
       a  "backspace-space-backspace" sequence when character or word deleting
       sequences are used.  A LCRTKIL bit may be  set  as  well,  causing  the
       input to	be erased in this manner on line kill sequences	as well.

       _E_c_h_o_i_n_g	_o_f _c_o_n_t_r_o_l _c_h_a_r_a_c_t_e_r_s_.	If the LCTLECH bit is set in the local
       state word, then	non-printing (control) characters are normally	echoed
       as  ^X  (for  some  X)  rather  than being echoed unmodified; delete is
       echoed as ^?.

       The normal modes	for use	on CRT	terminals  are	speed  dependent.   At
       speeds  less  than  1200	 baud,	the LCRTERA and	LCRTKILL processing is
       painfully slow, and _s_t_t_y(1) normally just sets LCRTBS and  LCTLECH;  at
       speeds  of  1200	 baud  or  greater all of these	bits are normally set.
       _S_t_t_y(1) summarizes these	option settings	and the	use of the new	termi-
       nal driver as "newcrt."

       OOuuttppuutt pprroocceessssiinngg..

       When  one or more characters are	written, they are actually transmitted
       to the terminal as soon as previously-written characters	have  finished
       typing.	 (As  noted  above,  input  characters	are normally echoed by
       putting them in the output queue	as they	arrive.)  When a process  pro-
       duces  characters  more rapidly than they can be	typed, it will be sus-
       pended when its output queue exceeds some limit.	 When  the  queue  has
       drained	down to	some threshold the program is resumed.	Even parity is
       normally	generated on output.  The EOT character	is not transmitted  in
       cooked  mode  to	 prevent terminals that	respond	to it from hanging up;
       programs	using RAW or CBREAK mode should	be careful.

       The terminal drivers provide necessary processing for cooked and	CBREAK
       mode  output including parity generation.  The driver will also option-
       ally expand tabs	into spaces, where the tab stops are assumed to	be set
       every  eight  columns,  and  optionally	convert	 newlines  to carriage
       returns followed	by newline.  These functions are controlled by bits in
       the tty flags word; see SSuummmmaarryy below.

       Finally,	in the new terminal driver, there is a output flush character,
       normally	^O, which sets the LFLUSHO bit in the local mode word, causing
       subsequent  output  to  be  flushed until it is cleared by a program or
       more input is typed.  This character has	 effect	 in  both  cooked  and
       CBREAK  modes  and  causes  pending input to be retyped if there	is any
       pending input.  An _i_o_c_t_l	to flush the characters	in the input or	output
       queues, TIOCFLUSH, is also available.

       FFllooww ccoonnttrrooll..

       There  are  two	characters  (the  stop character, normally ^S, and the
       start character,	normally ^Q) which cause output	to  be	suspended  and
       resumed	respectively.	Extra  stop  characters	 typed	when output is
       already stopped have no effect, unless the start	 and  stop  characters
       are made	the same, in which case	output resumes.

       A  bit  in  the	flags  word may	be set to put the terminal into	TANDEM
       mode.  In this mode the system produces a stop character	 (default  ^S)
       when the	input queue is in danger of overflowing, and a start character
       (default	^Q) when the input has drained	sufficiently.	This  mode  is
       useful  when  the terminal is actually another machine that obeys those
       conventions.

       If software flow	control	is not sufficient  (it	begins	failing	 above
       4800  bits  per	second	on  slow  systems) RTS/CTS flow	control	is now
       available.  Hardware flow control causes	RTS to	be  dropped  when  the
       remote  system (modem) should cease sending and to be raised when addi-
       tional data can be accepted.  If	the remote system drops	CTS  then  the
       local  host ceases sending data until the CTS is	raised.	 Hardware flow
       control is enabled via the TTIIOOCCLLBBIISS (or TIOCLBIC	or TIOCLSET)  function
       and the bit LLRRTTSSCCTTSS.

       LLiinnee ccoonnttrrooll aanndd	bbrreeaakkss..

       There  are  several  _i_o_c_t_l  calls available to control the state	of the
       terminal	line.  The TIOCSBRK _i_o_c_t_l will set the break bit in the	 hard-
       ware  interface causing a break condition to exist; this	can be cleared
       (usually	after a	delay with _s_l_e_e_p(3)) by	TIOCCBRK.  Break conditions in
       the  input  are	reflected  as  a  null character in RAW	mode or	as the
       interrupt character in cooked or	CBREAK mode.  The TIOCCDTR _i_o_c_t_l  will
       clear  the data terminal	ready condition; it can	be set again by	TIOCS-
       DTR.

       When the	carrier	signal from the	dataset	 drops	(usually  because  the
       user  has  hung	up his terminal) a SIGHUP hangup signal	is sent	to the
       processes in the	distinguished process group of the terminal; this usu-
       ally causes them	to terminate.  The SIGHUP can be suppressed by setting
       the LNOHANG bit in the local state word of the driver.  Access  to  the
       terminal	 by  other  processes is then normally revoked,	so any further
       reads will fail,	and programs that read a terminal and test for end-of-
       file on their input will	terminate appropriately.

       It  is possible to ask that the phone line be hung up on	the last close
       with the	TIOCHPCL _i_o_c_t_l;	this is	normally done on  the  outgoing	 lines
       and dialups.

       IInntteerrrruupptt cchhaarraacctteerrss..

       There  are  several  characters	that generate interrupts in cooked and
       CBREAK mode; all	are sent to the	processes in the control group of  the
       terminal,  as  if  a TIOCGPGRP _i_o_c_t_l were done to get the process group
       and then	a _k_i_l_l_p_g(2) system call	were done, except that	these  charac-
       ters  also  flush  pending  input  and  output when typed at a terminal
       (_'_a_`_'_l_a TIOCFLUSH).  The characters shown	here  are  the	defaults;  the
       field  names in the structures (given below) are	also shown.  The char-
       acters may be changed.

       ^C     tt__iinnttrrcc (ETX) generates a	SIGINT signal.	This is	the normal way
	      to  stop	a process which	is no longer interesting, or to	regain
	      control in an interactive	program.

       ^\     tt__qquuiittcc (FS) generates a SIGQUIT signal.	This is	used to	 cause
	      a	program	to terminate and produce a core	image, if possible, in
	      the file ccoorree in the current directory.

       ^Z     tt__ssuussppcc (EM) generates a SIGTSTP signal, which is	used  to  sus-
	      pend the current process group.

       ^Y     tt__ddssuussppcc	(SUB)  generates  a SIGTSTP signal as ^Z does, but the
	      signal is	sent when a program attempts to	read  the  ^Y,	rather
	      than when	it is typed.

       JJoobb aacccceessss ccoonnttrrooll..

       When  using  the	 new terminal driver, if a process which is not	in the
       distinguished process group of its control terminal  attempts  to  read
       from  that  terminal  its process group is sent a SIGTTIN signal.  This
       signal normally causes the members of that process group	to stop.   If,
       however,	the process is ignoring	SIGTTIN, has SIGTTIN blocked, or is in
       the middle of process creation using _v_f_o_r_k(2)), the read	will return -1
       and set _e_r_r_n_o to	EIO.

       When  using  the	 new  terminal	driver with the	LTOSTOP	bit set	in the
       local modes, a process is prohibited from writing on its	control	termi-
       nal  if it is not in the	distinguished process group for	that terminal.
       Processes which are holding or ignoring SIGTTOU signals or which	are in
       the  middle  of	a _v_f_o_r_k(2) are excepted	and allowed to produce output.
       TTeerrmmiinnaall//wwiinnddooww ssiizzeess..  In order	to accommodate terminals and  worksta-
       tions with variable-sized windows, the terminal driver provides a mech-
       anism for obtaining and setting the current terminal size.  The	driver
       does  not  use this information internally, but only stores it and pro-
       vides a uniform access mechanism.  When the size	is changed, a SIGWINCH
       signal  is  sent	 to the	terminal's process group so that knowledgeable
       programs	may detect size	changes.  This facility	was  added  in	4.3BSD
       and is not available in earlier versions	of the system.

       SSuummmmaarryy ooff mmooddeess..

       Unfortunately, due to the evolution of the terminal driver, there are 4
       different structures which contain various portions of the driver data.
       The  first  of  these  (ssggttttyybb)	contains  that part of the information
       largely common between version 6	and version 7 UNIX systems.  The  sec-
       ond  contains  additional  control  characters added in version 7.  The
       third is	a word of local	state added in 4BSD, and the fourth is another
       structure  of  special  characters  added  for  the new driver.	In the
       future a	single structure may be	made available to programs which  need
       to  access  all	this information; most programs	need not concern them-
       selves with all this state.

       _B_a_s_i_c _m_o_d_e_s_: _s_g_t_t_y_.

       The basic _i_o_c_t_ls	use the	structure defined in _<_s_g_t_t_y_._h_>:

       ssttrruucctt ssggttttyybb {{
	    cchhaarr ssgg__iissppeeeedd;;
	    cchhaarr ssgg__oossppeeeedd;;
	    cchhaarr ssgg__eerraassee;;
	    cchhaarr ssgg__kkiillll;;
	    sshhoorrttssgg__ffllaaggss;;
       }};;

       The _s_g___i_s_p_e_e_d and _s_g___o_s_p_e_e_d fields describe the input and output	speeds
       of  the	device	according to the following table, which	corresponds to
       the DEC DH-11 interface.	 If other hardware is used,  impossible	 speed
       changes	are  ignored.	Symbolic values	in the table are as defined in
       _<_s_g_t_t_y_._h_>.

       B0      0    (hang up dataphone)
       B50     1    50 baud
       B75     2    75 baud
       B110    3    110	baud
       B134    4    134.5 baud
       B150    5    150	baud
       B200    6    200	baud
       B300    7    300	baud
       B600    8    600	baud
       B1200   9    1200 baud
       B1800   10   1800 baud
       B2400   11   2400 baud
       B4800   12   4800 baud
       B9600   13   9600 baud
       EXTA    14   External A
       EXTB    15   External B

       Code conversion and line	control	required for IBM 2741's	 (134.5	 baud)
       must be implemented by the user's program.  The half-duplex line	disci-
       pline required for the 202 dataset (1200	baud) is not  supplied;	 full-
       duplex 212 datasets work	fine.

       The  _s_g___e_r_a_s_e  and _s_g___k_i_l_l fields of the	argument structure specify the
       erase and kill characters respectively.	(Defaults are DELETE and ^U.)

       The _s_g___f_l_a_g_s field of the argument structure contains several bits that
       determine the system's treatment	of the terminal:

       XTABS  0004000 Expand tabs on output
       EVENP  0000200 Even parity allowed on input
       ODDP   0000100 Odd parity allowed on input
       RAW    0000040 Raw mode:	wake up	on all characters, 8-bit interface
       CRMOD  0000020 Map CR into LF; output LF	as CR-LF
       ECHO   0000010 Echo (full duplex)
       CBREAK 0000002 Return each character as soon as typed
       TANDEM 0000001 Automatic	inbound	xon/xoff flow control

       XTABS,  causes  tabs to be replaced by the appropriate number of	spaces
       on output.

       The flags for even and odd parity control parity	checking on input  and
       generation  on  output  in  cooked  and	CBREAK	mode (unless LPASS8 is
       enabled,	see below).  Even parity is generated on output	unless ODDP is
       set  and	 EVENP is clear, in which case odd parity is generated.	 Input
       characters with the wrong parity, as determined by EVENP	and ODDP,  are
       ignored in cooked and CBREAK mode.

       RAW  disables  all processing save output flushing with LFLUSHO;	full 8
       bits of input are given as soon as it is	 available;  all  8  bits  are
       passed on output.  A break condition in the input is reported as	a null
       character.  If the input	queue overflows	in raw mode all	 data  in  the
       input and output	queues are discarded; this applies to both new and old
       drivers.

       CRMOD causes input carriage returns to be turned	 into  new-lines,  and
       output  and echoed new-lines to be output as a carriage return followed
       by a line feed.

       CBREAK is a sort	of half-cooked (rare?) mode.  Programs can  read  each
       character  as  soon  as	typed, instead of waiting for a	full line; all
       processing is done except the input editing: character and  word	 erase
       and  line  kill,	 input reprint,	and the	special	treatment of \ and EOT
       are disabled.

       TANDEM mode causes the system to	produce	a stop character (default  ^S)
       whenever	the input queue	is in danger of	overflowing, and a start char-
       acter (default ^Q) when the input queue has drained  sufficiently.   It
       is  useful  for flow control when the `terminal'	is really another com-
       puter which understands the conventions.

       NNoottee:: The same ``stop'' and ``start''  characters  are  used  for  both
       directions  of flow control; the	_t___s_t_o_p_c	character is accepted on input
       as the character	that stops output and is produced  on  output  as  the
       character  to  stop  input,  and	 the _t___s_t_a_r_t_c character	is accepted on
       input as	the character that restarts output and is produced  on	output
       as the character	to restart input.

       _B_a_s_i_c _i_o_c_t_l_s

       A  large	 number	 of  _i_o_c_t_l(2) calls apply to terminals.	 Some have the
       general form:

       ##iinncclluuddee	<<ssggttttyy..hh>>

       iiooccttll((ffiillddeess,, ccooddee,, aarrgg))
       ssttrruucctt ssggttttyybb **aarrgg;;

       The applicable codes are:

       TIOCGETP	      Fetch the	basic parameters associated with the terminal,
		      and store	in the pointed-to _s_g_t_t_y_b structure.

       TIOCSETP	      Set  the	parameters  according to the pointed-to	_s_g_t_t_y_b
		      structure.  The interface	delays until output is	quies-
		      cent,  then  throws  away	 any unread characters,	before
		      changing the modes.

       TIOCSETN	      Set the parameters like TIOCSETP but  do	not  delay  or
		      flush  input.   Input  is	 not  preserved, however, when
		      changing to or from RAW.

       With the	following codes	_a_r_g is ignored.

       TIOCEXCL	      Set "exclusive-use" mode:	no further opens are permitted
		      until the	file has been closed.

       TIOCNXCL	      Turn off "exclusive-use" mode.

       TIOCHPCL	      When  the	 file is closed	for the	last time, hang	up the
		      terminal.	 This is useful	when the  line	is  associated
		      with an ACU used to place	outgoing calls.

       With the	following codes	_a_r_g is a pointer to an iinntt.

       TIOCGETD	      _a_r_g is a pointer to an iinntt into which is placed the cur-
		      rent line	discipline number.

       TIOCSETD	      _a_r_g is a pointer to an iinntt whose value becomes the  cur-
		      rent line	discipline number.

       TIOCFLUSH      If the iinntt pointed to by _a_r_g has a zero value, all char-
		      acters waiting in	input or output	 queues	 are  flushed.
		      Otherwise,  the  value  of  the iinntt is for the FREAD and
		      FWRITE bits defined in <<ssyyss//ffiillee..hh>>; if the FREAD	bit is
		      set, all characters waiting in input queues are flushed,
		      and if the FWRITE	bit is set, all	characters waiting  in
		      output queues are	flushed.

       The  remaining  calls  are not available	in vanilla version 7 UNIX.  In
       cases where arguments are required, they	are described; _a_r_g should oth-
       erwise be given as 0.

       TIOCSTI	      the argument points to a character which the system pre-
		      tends had	been typed on the terminal.

       TIOCSBRK	      the break	bit is set in the terminal.

       TIOCCBRK	      the break	bit is cleared.

       TIOCSDTR	      data terminal ready is set.

       TIOCCDTR	      data terminal ready is cleared.

       TIOCSTOP	      output is	stopped	as if the ``stop'' character had  been
		      typed.

       TIOCSTART      output  is  restarted  as	if the ``start'' character had
		      been typed.

       TIOCGPGRP      _a_r_g is a pointer to an iinntt  into	which  is  placed  the
		      process  group  ID  of  the process group	for which this
		      terminal is the control terminal.

       TIOCSPGRP      _a_r_g is a pointer to an iinntt which is the value  to	 which
		      the process group	ID for this terminal will be set.

       TIOCOUTQ	      returns in the iinntt pointed to by _a_r_g the number of char-
		      acters queued for	output to the terminal.

       FIONREAD	      returns in the lloonngg pointed to  by  _a_r_g  the  number  of
		      characters   immediately	 readable  from	 the  argument
		      descriptor.  This	works for files, pipes,	and terminals.

       _T_c_h_a_r_s

       The second structure associated with each terminal specifies characters
       that  are special in both the old and new terminal interfaces: The fol-
       lowing structure	is defined in _<_s_y_s_/_i_o_c_t_l_._h_>,  which  is	 automatically
       included	in _<_s_g_t_t_y_._h_>:

       ssttrruucctt ttcchhaarrss {{
	    cchhaarr tt__iinnttrrcc;;  //** iinntteerrrruupptt	**//
	    cchhaarr tt__qquuiittcc;;  //** qquuiitt **//
	    cchhaarr tt__ssttaarrttcc;; //** ssttaarrtt oouuttppuutt **//
	    cchhaarr tt__ssttooppcc;;  //** ssttoopp oouuttppuutt **//
	    cchhaarr tt__eeooffcc;;   //** eenndd--ooff--ffiillee **//
	    cchhaarr tt__bbrrkkcc;;   //** iinnppuutt ddeelliimmiitteerr ((lliikkee nnll))	**//
       }};;

       The default values for these characters are ^C, ^\, ^Q, ^S, ^D, and -1.
       A character value of -1 eliminates the effect of	that  character.   The
       _t___b_r_k_c character, by default -1,	acts like a new-line in	that it	termi-
       nates a `line,' is echoed, and is passed	to the	program.   The	`stop'
       and `start' characters may be the same, to produce a toggle effect.  It
       is probably counterproductive to	make other special characters (includ-
       ing erase and kill) identical.  The applicable _i_o_c_t_l calls are:

       TIOCGETC	   Get	the  special  characters and put them in the specified
		   structure.

       TIOCSETC	   Set the special characters to those given in	the structure.

       _L_o_c_a_l _m_o_d_e

       The third structure associated with each	terminal is a local mode word.
       The bits	of the local mode word are:

       LCRTBS	 000001	   Backspace on	erase rather than echoing erase
       LPRTERA	 000002	   Printing terminal erase mode
       LCRTERA	 000004	   Erase character echoes as backspace-space-backspace
       LMDMBUF	 000020	   Stop/start output when carrier drops
       LLITOUT	 000040	   Suppress output translations
       LTOSTOP	 000100	   Send	SIGTTOU	for background output
       LFLUSHO	 000200	   Output is being flushed
       LNOHANG	 000400	   Don't send hangup when carrier drops
       LRTSCTS	 001000	   RTS/CTS flow	control
       LCRTKIL	 002000	   BS-space-BS erase entire line on line kill
       LPASS8	 004000	   Pass	all 8 bits through on input, in	any mode
       LCTLECH	 010000	   Echo	input control chars as ^X, delete as ^?
       LPENDIN	 020000	   Retype pending input	at next	read or	input character
       LDECCTQ	 040000	   Only	^Q restarts output after ^S, like DEC systems
       LNOFLSH	 100000	   Inhibit flushing of pending I/O when	an interrupt character is typed.

       The applicable _i_o_c_t_l functions are:

       TIOCLBIS	      _a_r_g  is  a  pointer to an	iinntt whose value	is a mask con-
		      taining the bits to be set in the	local mode word.

       TIOCLBIC	      _a_r_g is a pointer to an iinntt whose value is	 a  mask  con-
		      taining the bits to be cleared in	the local mode word.

       TIOCLSET	      _a_r_g  is a	pointer	to an iinntt whose	value is stored	in the
		      local mode word.

       TIOCLGET	      _a_r_g is a pointer to an iinntt into which the	current	 local
		      mode word	is placed.

       _L_o_c_a_l _s_p_e_c_i_a_l _c_h_a_r_s

       The  final  control  structure  associated  with	 each  terminal	is the
       _l_t_c_h_a_r_s structure which defines control characters for the new terminal
       driver.	Its structure is:

       ssttrruucctt llttcchhaarrss {{
	    cchhaarr tt__ssuussppcc;;  //** ssttoopp pprroocceessss ssiiggnnaall **//
	    cchhaarr tt__ddssuussppcc;; //** ddeellaayyeedd ssttoopp pprroocceessss ssiiggnnaall **//
	    cchhaarr tt__rrpprrnnttcc;; //** rreepprriinntt lliinnee **//
	    cchhaarr tt__fflluusshhcc;; //** fflluusshh oouuttppuutt ((ttoogggglleess)) **//
	    cchhaarr tt__wweerraasscc;; //** wwoorrdd eerraassee **//
	    cchhaarr tt__llnneexxttcc;; //** lliitteerraall nneexxtt cchhaarraacctteerr **//
       }};;

       The default values for these characters are ^Z, ^Y, ^R, ^O, ^W, and ^V.
       A value of -1 disables the character.

       The applicable _i_o_c_t_l functions are:

       TIOCSLTC	   _a_r_g is a pointer to an _l_t_c_h_a_r_s structure which defines  the
		   new local special characters.

       TIOCGLTC	   _a_r_g	is  a  pointer	to  an _l_t_c_h_a_r_s structure into which is
		   placed the current set of local special characters.

       _W_i_n_d_o_w_/_t_e_r_m_i_n_a_l _s_i_z_e_s

       Each terminal has provision for storage of the current terminal or win-
       dow size	in a _w_i_n_s_i_z_e structure,	with format:

       ssttrruucctt wwiinnssiizzee {{
	    uunnssiiggnneedd sshhoorrtt    wwss__rrooww;;	     //**	rroowwss,, iinn cchhaarraacctteerrss **//
	    uunnssiiggnneedd sshhoorrtt    wwss__ccooll;;	     //**	ccoolluummnnss,, iinn cchhaarraacctteerrss **//
	    uunnssiiggnneedd sshhoorrtt    wwss__xxppiixxeell;;     //**	hhoorriizzoonnttaall ssiizzee,, ppiixxeellss	**//
	    uunnssiiggnneedd sshhoorrtt    wwss__yyppiixxeell;;     //**	vveerrttiiccaall ssiizzee,, ppiixxeellss **//
       }};;

       A  value	 of 0 in any field is interpreted as ``undefined;'' the	entire
       structure is zeroed on final close.

       The applicable _i_o_c_t_l functions are:

       TIOCGWINSZ
	      _a_r_g is a pointer to a ssttrruucctt wwiinnssiizzee into	which will  be	placed
	      the current terminal or window size information.

       TIOCSWINSZ
	      _a_r_g  is  a pointer to a ssttrruucctt wwiinnssiizzee which will	be used	to set
	      the current terminal or window size  information.	  If  the  new
	      information  is  different  than the old information, a SIGWINCH
	      signal will be sent to the terminal's process group.

FFIILLEESS
       /dev/tty
       /dev/tty*
       /dev/console

SSEEEE AALLSSOO
       csh(1), stty(1),	tset(1), ioctl(2), sigvec(2), stty(3C),	getty(8)



4th Berkeley Distribution	April 10, 1997				TTY(4)
