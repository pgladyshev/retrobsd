HK(4)			   Kernel Interfaces Manual			 HK(4)



NNAAMMEE
       hk - RK6-11/RK06	and RK07 moving	head disk

SSYYNNOOPPSSIISS
       //ssyyss//ccoonnff//SSYYSSTTEEMM::
	    NNHHKK	 _h_k___d_r_i_v_e_s ## RRKK661111,, RRKK0066//0077

       //eettcc//ddttaabb::
	    ##NNaammee UUnniitt##	AAddddrr   VVeeccttoorr BBrr HHaannddlleerr((ss))	 ## CCoommmmeennttss
	    hhkk	  ??	117777444400 221100    55	 hhkkiinnttrr		 ## rrkk661111//771111 rrkk0066//0077

       mmaajjoorr ddeevviiccee nnuummbbeerr((ss))::
	    rraaww:: 1133
	    bblloocckk:: 44
       mmiinnoorr ddeevviiccee eennccooddiinngg::
	    bbiittss 00000077 ssppeecciiffyy ppaarrttiittiioonn	ooff HHKK ddrriivvee
	    bbiittss 00007700 ssppeecciiffyy HHKK ddrriivvee

DDEESSCCRRIIPPTTIIOONN
       Files  with  minor device numbers 0 through 7 refer to various portions
       of drive	0; minor devices 8 through 15 refer  to	 drive	1,  etc.   The
       standard	 device	 names	begin with ``hk'' followed by the drive	number
       and then	a letter a-h for partitions 0-7	respectively.  The character ?
       stands here for a drive number in the range 0-7.

       The block files access the disk via the system's	normal buffering mech-
       anism and may be	read and  written  without  regard  to	physical  disk
       records.	  There	 is  also  a `raw' interface which provides for	direct
       transmission between the	disk and the user's read or write  buffer.   A
       single  read  or	 write	call  results in exactly one I/O operation and
       therefore raw I/O is considerably more efficient	when  many  words  are
       transmitted.   The  names of the	raw files conventionally begin with an
       extra `r.'

       In raw I/O the buffer must begin	on a word (even) boundary, and	counts
       should be a multiple of 512 bytes (a disk sector).  Likewise _s_e_e_k calls
       should specify a	multiple of 512	bytes.

DDIISSKK SSUUPPPPOORRTT
       Disks must be labeled using either the standalone _d_i_s_k_l_a_b_e_l program  on
       the boot	tape or	with the _d_i_s_k_l_a_b_e_l(8) program.	There are no partition
       tables coded into the _h_k	drivers, these must be	placed	on  the	 drive
       with _d_i_s_k_l_a_b_e_l.

       Traditionally the _h_k_?_a partition	is used	for the	root filesystem, the _b
       partition as a swap area	and the	_c partition for	disk to	 disk  copying
       (it spans the entire disk).

       The  kernel  uses  the  _c partition to access the bad block information
       stored at the end of some packs.	 Extreme care must be taken when  cre-
       ating file systems on this partition to avoid overwriting any bad block
       information present.  User data should use the _h	partition which	should
       be  at  least one track (one cylinder might be best) shorter than the _c
       partition.

FFIILLEESS
       /dev/hk[0-7][a-h]   block files
       /dev/rhk[0-7][a-h]  raw files
       /dev/MAKEDEV	   script to create special files
       /dev/MAKEDEV.local  script to localize special files

SSEEEE AALLSSOO
       ra(4) ram(4), rk(4), rl(4),  rx(4),  si(4),  xp(4),  dtab(5),  autocon-
       fig(8), disklabel(8)

DDIIAAGGNNOOSSTTIICCSS
       hhkk%%dd%%cc::	hhaarrdd  eerrrroorr  ssnn%%dd  ccss22==%%bb ddss==%%bb	eerr==%%bb.	An unrecoverable error
       occurred	during transfer	of the specified sector	of the specified  disk
       partition.  The contents	of the cs2, ds and er registers	are printed in
       octal and symbolically with bits	decoded.  The error was	 either	 unre-
       coverable,  or a	large number of	retry attempts (including offset posi-
       tioning and drive recalibration)	could not recover the error.

       hhkk%%dd:: wwrriittee lloocckkeedd.  The	write protect switch was set on	the drive when
       a write was attempted.  The write operation is not recoverable.

       hhkk%%dd::  nnoott  rreeaaddyy.   The	 drive	was  spun down or off line when	it was
       accessed.  The i/o operation is not recoverable.

       hhkk%%dd:: nnoott rreeaaddyy ((ccaammee bbaacckk!!)).  The  drive  was  not  ready,  but	 after
       printing	the message about being	not ready (which takes a fraction of a
       second) was ready.  The operation is recovered  if  no  further	errors
       occur.

       hhkk%%dd%%cc::	ssoofftt eecccc ssnn%%dd.	A recoverable ECC error	occurred on the	speci-
       fied sector of the specified disk partition.  This happens  normally  a
       few  times a week.  If it happens more frequently than this the sectors
       where the errors	are occuring should  be	 checked  to  see  if  certain
       cylinders  on the pack, spots on	the carriage of	the drive or heads are
       indicated.

BBUUGGSS
       In raw I/O _r_e_a_d and _w_r_i_t_e(2) truncate file offsets  to  512-byte	 block
       boundaries,  and	 _w_r_i_t_e	scribbles  on  the  tail of incomplete blocks.
       Thus, in	programs that are likely to access raw	devices,  _r_e_a_d_,	 _w_r_i_t_e
       and _l_s_e_e_k(2) should always deal in 512-byte multiples.

       DEC-standard error logging should be supported.

       A  program to analyze the logged	error information (even	in its present
       reduced form) is	needed.



3rd Berkeley Distribution      December	28, 1997			 HK(4)
