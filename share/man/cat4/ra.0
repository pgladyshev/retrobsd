RA(4)			   Kernel Interfaces Manual			 RA(4)



NNAAMMEE
       ra - MSCP disk controller interface

SSYYNNOOPPSSIISS
       //ssyyss//ccoonnff//SSYYSSTTEEMM::
	    NNRRAACC _r_a___c_o_n_t_r_o_l_l_e_r_s	## NNRRAADD ccoonnttrroolllleerrss
	    NNRRAADD _r_a___d_r_i_v_e_s	## RRXX3333//5500,, RRCC2255,, RRDD5511//5522//5533//5544,,	RRAA6600//8800//8811//8822

       //eettcc//ddttaabb::
	    ##NNaammee UUnniitt##	AAddddrr   VVeeccttoorr BBrr HHaannddlleerr((ss))	 ## CCoommmmeennttss
	    rraa	  ??	117722115500 115544    55	 rraaiinnttrr		 ## uuddaa5500,, rrqqddxx11//22//33

       mmaajjoorr ddeevviiccee nnuummbbeerr((ss))::
	    rraaww:: 1144
	    bblloocckk:: 55
       mmiinnoorr ddeevviiccee eennccooddiinngg::
	    bbiittss 00000077 ssppeecciiffyy ppaarrttiittiioonn	ooff RRAA ddrriivvee
	    bbiittss 00007700 ssppeecciiffyy RRAA ddrriivvee
	    bbiittss 00330000 ssppeecciiffyy RRAA ccoonnttrroolllleerr

DDEESSCCRRIIPPTTIIOONN
       This  is	a driver for the DEC UDA-50 disk controller and	for other com-
       patible controllers.  The UDA-50	communicates with the host  through  a
       packet  oriented	 protocol  termed  the	Mass  Storage Control Protocol
       (MSCP).	Consult	the file <_p_d_p_/_m_s_c_p_._h> for a  detailed  description  of
       this protocol.

       Files  with  minor device numbers 0 through 7 refer to various portions
       of drive	0; minor devices 8 through 15 refer  to	 drive	1,  etc.   The
       standard	 device	 names	begin with ``ra'' followed by the drive	number
       and then	a letter a-h for partitions 0-7	respectively.  The character ?
       stands here for a drive number in the range 0-7.

       The block files access the disk via the system's	normal buffering mech-
       anism and may be	read and  written  without  regard  to	physical  disk
       records.	  There	 is  also  a `raw' interface which provides for	direct
       transmission between the	disk and the user's read or write  buffer.   A
       single  read  or	 write	call  results in exactly one I/O operation and
       therefore raw I/O is considerably more efficient	when  many  words  are
       transmitted.   The  names of the	raw files conventionally begin with an
       extra `r.'

       In raw I/O the buffer must begin	on a word (even) boundary, and	counts
       should be a multiple of 512 bytes (a disk sector).  Likewise _s_e_e_k calls
       should specify a	multiple of 512	bytes.

DDIISSKK SSUUPPPPOORRTT
       This driver configures the drive	type of	each drive when	 it  is	 first
       opened.	Partition information is read from the disklabel.  If there is
       no label	or the label is	corrupt	then the 'a' partition is used to span
       the entire drive.

       The  ra?a partition is normally used for	the root file system, the ra?b
       partition as a swap area, and the ra?c partition	for pack-pack  copying
       (it maps	the entire disk).

FFIILLEESS
       /dev/ra[0-7][a-h]
       /dev/rra[0-7][a-h]
       /dev/MAKEDEV	   script to create special files

SSEEEE AALLSSOO
       hk(4), ram(4), rk(4), rl(4), rp(4), rx(4), si(4), xp(4),	dtab(5), auto-
       config(8), disklabel(8)

DDIIAAGGNNOOSSTTIICCSS
       rraassaa %%oo,,	ssttaattee %%dd.  (Additional status information given	after  a  hard
       i/o  error.)  The values	of the UDA-50 status register and the internal
       driver state are	printed.

       rraa%%dd:: iinntteerrrruupptt iinn uunnkknnoowwnn ssttaattee	%%dd iiggnnoorreedd.  An	interrupt was received
       when the	driver was in an unknown internal state.  Indicates a hardware
       problem or a driver bug.

       rraa%%dd:: ffaattaall eerrrroorr ((%%oo)).	The UDA-50 indicated a ``fatal error'' in  the
       status  returned	 to the	host.  The contents of the status register are
       displayed.

       rraa%%dd,,%%dd::	OOFFFFLLIINNEE.  (Additional status information given	after  a  hard
       i/o  error.)   A	 hard i/o error	occurred because the drive was not on-
       line.  The attached unit	number and the MSCP unit numbers are printed.

       ssttaattuuss %%oo.  (Additional status  information  given  after  a  hard  i/o
       error.)	The status information returned	from the UDA-50	is tacked onto
       the end of the hard error message printed on the	console.

       rraa:: uunnkknnoowwnn ppaacckkeett ooppccooddee==00%%oo.  An MSCP	packet	of  unknown  type  was
       received	from the UDA-50.  Check	the cabling to the controller.

       The  following  errors  are  interpretations  of	 MSCP  error  messages
       returned	by the UDA-50 to the host.

       rraa:: %%ss eerrrroorr,, ccoonnttrroolllleerr	eerrrroorr,, eevveenntt 00%%oo.

       rraa:: %%ss eerrrroorr,, hhoosstt mmeemmoorryy aacccceessss	eerrrroorr,, eevveenntt 00%%oo,, aaddddrr 00%%oo.

       rraa:: %%ss eerrrroorr,, ddiisskk ttrraannssffeerr eerrrroorr,, uunniitt %%dd,, ggrrpp 00xx%%xx,, hhddrr 00xx%%xx.

       rraa:: %%ss eerrrroorr,, SSDDII eerrrroorr,,	uunniitt %%dd,, eevveenntt 00%%oo,, hhddrr	00xx%%xx.

       rraa:: %%ss eerrrroorr,, ssmmaallll ddiisskk	eerrrroorr,, uunniitt %%dd,,	eevveenntt 00%%oo,, ccyyll %%dd.

       rraa:: %%ss eerrrroorr,, uunnkknnoowwnn eerrrroorr,, uunniitt %%dd,, ffoorrmmaatt 00%%oo,, eevveenntt 00%%oo.

BBUUGGSS
       In raw I/O _r_e_a_d and _w_r_i_t_e(2) truncate file offsets  to  512-byte	 block
       boundaries,  and	 _w_r_i_t_e	scribbles  on  the  tail of incomplete blocks.
       Thus, in	programs that are likely to access raw	devices,  _r_e_a_d_,	 _w_r_i_t_e
       and _l_s_e_e_k(2) should always deal in 512-byte multiples.



3rd Berkeley Distribution      September 6, 1987			 RA(4)
