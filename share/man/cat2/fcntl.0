FCNTL(2)		      System Calls Manual		      FCNTL(2)



NNAAMMEE
       fcntl - file control

SSYYNNOOPPSSIISS
       ##iinncclluuddee	<<ffccnnttll..hh>>

       rreess == ffccnnttll((ffdd,, ccmmdd,, aarrgg))
       iinntt rreess;;
       iinntt ffdd,, ccmmdd,, aarrgg;;

DDEESSCCRRIIPPTTIIOONN
       _F_c_n_t_l  provides	for  control  over  descriptors.  The argument _f_d is a
       descriptor to be	operated on by _c_m_d as follows:

       F_DUPFD	      Return a new descriptor as follows:

		      Lowest numbered available	 descriptor  greater  than  or
		      equal to _a_r_g_.

		      Same object references as	the original descriptor.

		      New  descriptor  shares  the  same  file	pointer	if the
		      object was a file.

		      Same access mode (read, write or read/write).

		      Same file	status	flags  (i.e.,  both  file  descriptors
		      share the	same file status flags).

		      The  close-on-exec  flag	associated  with  the new file
		      descriptor is set	to remain open across _e_x_e_c_v(2)	system
		      calls.

       F_GETFD	      Get  the	close-on-exec  flag  associated	 with the file
		      descriptor _f_d.  If the low-order bit is 0, the file will
		      remain  open  across  _e_x_e_c,  otherwise  the file will be
		      closed upon execution of _e_x_e_c_.

       F_SETFD	      Set the close-on-exec flag associated with _f_d to the low
		      order bit	of _a_r_g (0 or 1 as above).

       F_GETFL	      Get descriptor status flags, as described	below.

       F_SETFL	      Set descriptor status flags.

       F_GETOWN	      Get  the process ID or process group currently receiving
		      SIGIO and	SIGURG signals;	process	groups are returned as
		      negative values.

       F_SETOWN	      Set  the	process	 or process group to receive SIGIO and
		      SIGURG signals; process groups are specified by  supply-
		      ing  _a_r_g	as negative, otherwise _a_r_g is interpreted as a
		      process ID.

       The flags for the F_GETFL and F_SETFL flags are as follows:

       O_NONBLOCK     Non-blocking I/O;	if no data  is	available  to  a  _r_e_a_d
		      call,  or	 if  a	write  operation would block, the call
		      returns -1 with the error	EWOULDBLOCK.

       O_APPEND	      Force each write to append at the	end  of	 file;	corre-
		      sponds to	the O_APPEND flag of _o_p_e_n(2).

       O_ASYNC	      Enable  the SIGIO	signal to be sent to the process group
		      when I/O is possible, e.g., upon availability of data to
		      be read.

RREETTUURRNN VVAALLUUEE
       Upon  successful	 completion, the value returned	depends	on _c_m_d as fol-
       lows:
	 F_DUPFD   A new file descriptor.
	 F_GETFD   Value of flag (only the low-order bit is defined).
	 F_GETFL   Value of flags.
	 F_GETOWN  Value of file descriptor owner.
	 other	   Value other than -1.
       Otherwise, a value of -1	is returned and	_e_r_r_n_o is set to	 indicate  the
       error.

EERRRROORRSS
       _F_c_n_t_l will fail if one or more of the following are true:

       [EBADF]	      _F_i_l_d_e_s is	not a valid open file descriptor.

       [EMFILE]	      _C_m_d  is  F_DUPFD	and the	maximum	allowed	number of file
		      descriptors are currently	open.

       [EINVAL]	      _C_m_d is F_DUPFD and _a_r_g is	negative or greater  than  the
		      maximum allowable	number (see _g_e_t_d_t_a_b_l_e_s_i_z_e(2)).

       [ESRCH]	      _C_m_d  is F_SETOWN and the process ID given	as argument is
		      not in use.

SSEEEE AALLSSOO
       close(2), execve(2), getdtablesize(2), open(2), sigvec(2)

BBUUGGSS
       The asynchronous	I/O facilities of O_NONBLOCK and O_ASYNC are currently
       available only for tty and socket operations.



4.2 Berkeley Distribution	 Nov 30, 1994			      FCNTL(2)
