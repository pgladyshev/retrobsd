SIGSTACK(2)		      System Calls Manual		   SIGSTACK(2)



NNAAMMEE
       sigstack	- set and/or get signal	stack context

SSYYNNOOPPSSIISS
       ##iinncclluuddee	<<ssiiggnnaall..hh>>

       ssttrruucctt ssiiggssttaacckk {{
       ccaaddddrr__tt	 ssss__sspp;;
       iinntt  ssss__oonnssttaacckk;;
       }};;

       ssiiggssttaacckk((ssss,, oossss));;
       ssttrruucctt ssiiggssttaacckk **ssss,, **oossss;;

DDEESSCCRRIIPPTTIIOONN
       TThhiiss iinntteerrffaaccee hhaass bbeeeenn mmaaddee oobbssoolleettee bbyy:: sigaltstack(2).

       _S_i_g_s_t_a_c_k	allows users to	define an alternate stack on which signals are
       to be processed.	 If _s_s is non-zero, it specifies  a  _s_i_g_n_a_l  _s_t_a_c_k  on
       which  to  deliver  signals and tells the system	if the process is cur-
       rently executing	on that	stack.	When a signal's	action	indicates  its
       handler	should execute on the signal stack (specified with a _s_i_g_v_e_c(2)
       call), the system checks	to see if the process is  currently  executing
       on that stack.  If the process is not currently executing on the	signal
       stack, the system arranges a switch to the signal stack for  the	 dura-
       tion  of	 the signal handler's execution.  If _o_s_s is non-zero, the cur-
       rent signal stack state is returned.

NNOOTTEESS
       Signal stacks are not ``grown'' automatically, as is done for the  nor-
       mal stack.  If the stack	overflows unpredictable	results	may occur.

RREETTUURRNN VVAALLUUEE
       Upon  successful	 completion,  a	 value of 0 is returned.  Otherwise, a
       value of	-1 is returned and _e_r_r_n_o is set	to indicate the	error.

EERRRROORRSS
       _S_i_g_s_t_a_c_k	will fail and the signal stack context will  remain  unchanged
       if one of the following occurs.

       [EFAULT]	      Either  _s_s  or  _o_s_s points to memory that	is not a valid
		      part of the process address space.

SSEEEE AALLSSOO
       sigvec(2), setjmp(3)

HHIISSTTOORRYY
       The ssiiggssttaacckk function call appeared in 4.2BSD and has been deprecated.



4.2 Berkeley Distribution      September 3, 1997		   SIGSTACK(2)
