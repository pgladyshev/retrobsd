EXECVE(2)		      System Calls Manual		     EXECVE(2)



NNAAMMEE
       execve -	execute	a file

SSYYNNOOPPSSIISS
       eexxeeccvvee((nnaammee,, aarrggvv,, eennvvpp))
       cchhaarr **nnaammee,, **aarrggvv[[]],, **eennvvpp[[]];;

DDEESSCCRRIIPPTTIIOONN
       _E_x_e_c_v_e  transforms  the	calling	 process  into a new process.  The new
       process is constructed from an ordinary file  called  the  _n_e_w  _p_r_o_c_e_s_s
       _f_i_l_e.  This file	is either an executable	object file, or	a file of data
       for an interpreter.  An executable object file consists of an identify-
       ing  header, followed by	pages of data representing the initial program
       (text) and initialized data pages.  Additional pages may	 be  specified
       by the header to	be initialized with zero data.	See _a_._o_u_t(5).

       An  interpreter file begins with	a line of the form ``#!	_i_n_t_e_r_p_r_e_t_e_r''.
       When an interpreter file	is _e_x_e_c_v_e'd, the system	_e_x_e_c_v_e's the specified
       _i_n_t_e_r_p_r_e_t_e_r,  giving  it	 the  name of the originally exec'd file as an
       argument	and shifting over the rest of the original arguments.

       There can be no return from a successful	 _e_x_e_c_v_e	 because  the  calling
       core  image  is	lost.  This is the mechanism whereby different process
       images become active.

       The argument _a_r_g_v is a null-terminated array of character  pointers  to
       null-terminated	character strings.  These strings constitute the argu-
       ment list to be made available to the new process.  By  convention,  at
       least one argument must be present in this array, and the first element
       of this array should be the name	of the	executed  program  (i.e.,  the
       last component of _n_a_m_e).

       The argument _e_n_v_p is also a null-terminated array of character pointers
       to null-terminated strings.  These strings pass information to the  new
       process	that  is  not  directly	 an argument to	the command (see _e_n_v_i_-
       _r_o_n(7)).

       Descriptors open	in the calling process remain open in the new process,
       except  for  those  for	which  the  close-on-exec  flag	 is  set  (see
       _c_l_o_s_e(2)).  Descriptors that remain open	are unaffected by _e_x_e_c_v_e.

       Ignored signals remain ignored across an	_e_x_e_c_v_e,	but signals  that  are
       caught  are  reset  to  their  default  values.	Blocked	signals	remain
       blocked regardless of changes to	the signal action.  The	 signal	 stack
       is reset	to be undefined	(see _s_i_g_v_e_c(2) for more	information).

       Each  process  has  _r_e_a_l	 user  and group IDs and an _e_f_f_e_c_t_i_v_e user and
       group IDs.  The _r_e_a_l ID identifies the person  using  the  system;  the
       _e_f_f_e_c_t_i_v_e  ID  determines  his  access  privileges.  _E_x_e_c_v_e changes the
       effective user and group	ID to the owner	of the executed	 file  if  the
       file  has  the "set-user-ID" or "set-group-ID" modes.  The _r_e_a_l user ID
       is not affected.

       The new process also inherits the following attributes from the calling
       process:

	    process ID		see _g_e_t_p_i_d(2)
	    parent process ID	see _g_e_t_p_p_i_d(2)
	    process group ID	see _g_e_t_p_g_r_p(2)
	    access groups	see _g_e_t_g_r_o_u_p_s(2)
	    working directory	see _c_h_d_i_r(2)
	    root directory	see _c_h_r_o_o_t(2)
	    control terminal	see _t_t_y(4)
	    resource usages	see _g_e_t_r_u_s_a_g_e(2)
	    interval timers	see _g_e_t_i_t_i_m_e_r(2)
	    resource limits	see _g_e_t_r_l_i_m_i_t(2)
	    file mode mask	see _u_m_a_s_k(2)
	    signal mask		see _s_i_g_v_e_c(2), _s_i_g_m_a_s_k(2)

       When the	executed program begins, it is called as follows:

	    main(argc, argv, envp)
	    int	argc;
	    char **argv, **envp;

       where  _a_r_g_c  is	the number of elements in _a_r_g_v (the ``arg count'') and
       _a_r_g_v is the array of character pointers to the arguments	themselves.

       _E_n_v_p is a pointer to an array of	strings	that constitute	 the  _e_n_v_i_r_o_n_-
       _m_e_n_t  of	 the  process.	 A pointer to this array is also stored	in the
       global variable ``environ''.  Each string consists of a name,  an  "=",
       and  a null-terminated value.  The array	of pointers is terminated by a
       null pointer.  The shell	_s_h(1) passes an	 environment  entry  for  each
       global  shell  variable	defined	when the program is called.  See _e_n_v_i_-
       _r_o_n(7) for some conventionally used names.

RREETTUURRNN VVAALLUUEE
       If _e_x_e_c_v_e returns to the	calling	process	an  error  has	occurred;  the
       return  value  will be -1 and the global	variable _e_r_r_n_o will contain an
       error code.

EERRRROORRSS
       _E_x_e_c_v_e will fail	and return to the calling process if one  or  more  of
       the following are true:

       [ENOTDIR]      A	component of the path prefix is	not a directory.

       [EINVAL]	      The  pathname  contains  a character with	the high-order
		      bit set.

       [ENAMETOOLONG] A	component of a pathname	exceeded 255 characters, or an
		      entire path name exceeded	1023 characters.

       [ENOENT]	      The new process file does	not exist.

       [ELOOP]	      Too  many	symbolic links were encountered	in translating
		      the pathname.

       [EACCES]	      Search permission	is denied for a	component of the  path
		      prefix.

       [EACCES]	      The new process file is not an ordinary file.

       [EACCES]	      The new process file mode	denies execute permission.

       [ENOEXEC]      The  new process file has	the appropriate	access permis-
		      sion, but	has an invalid magic number in its header.

       [ETXTBSY]      The new process file is a	pure procedure	(shared	 text)
		      file  that  is  currently	open for writing or reading by
		      some process.

       [ENOMEM]	      The new process requires more  virtual  memory  than  is
		      allowed by the imposed maximum (_g_e_t_r_l_i_m_i_t(2)).

       [E2BIG]	      The  number  of bytes in the new process's argument list
		      is larger	than the system-imposed	limit.	The  limit  in
		      the  system  as  released	 is  20480  bytes  (NCARGS  in
		      _<_s_y_s_/_p_a_r_a_m_._h_>.

       [EFAULT]	      The new process file is not as long as indicated by  the
		      size values in its header.

       [EFAULT]	      _P_a_t_h, _a_r_g_v, or _e_n_v_p point	to an illegal address.

       [EIO]	      An  I/O  error occurred while reading from the file sys-
		      tem.

CCAAVVEEAATTSS
       If a program is _s_e_t_u_i_d to a non-super-user, but is  executed  when  the
       real  _u_i_d  is  ``root'',	 then  the program has some of the powers of a
       super-user as well.

SSEEEE AALLSSOO
       exit(2),	fork(2), execl(3), environ(7)



4th Berkeley Distribution	 May 22, 1986			     EXECVE(2)
