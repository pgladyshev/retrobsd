FORK(2)			      System Calls Manual		       FORK(2)



NNAAMMEE
       fork - create a new process

SSYYNNOOPPSSIISS
       ppiidd == ffoorrkk(())
       iinntt ppiidd;;

DDEESSCCRRIIPPTTIIOONN
       _F_o_r_k causes creation of a new process.  The new process (child process)
       is an exact copy	of the calling process except for the following:

	    The	child process has a unique process ID.

	    The	child process has a different parent  process  ID  (i.e.,  the
	    process ID of the parent process).

	    The	 child	process	 has its own copy of the parent's descriptors.
	    These descriptors reference	the same underlying objects, so	 that,
	    for	instance, file pointers	in file	objects	are shared between the
	    child and the parent, so that an _l_s_e_e_k(2) on a descriptor  in  the
	    child process can affect a subsequent _r_e_a_d or _w_r_i_t_e	by the parent.
	    This descriptor copying is also used by  the  shell	 to  establish
	    standard  input  and output	for newly created processes as well as
	    to set up pipes.

	    The	child processes	resource utilizations are set to 0; see	 _s_e_t_r_-
	    _l_i_m_i_t(2).

RREETTUURRNN VVAALLUUEE
       Upon  successful	 completion,  _f_o_r_k  returns  a value of	0 to the child
       process and returns the process ID of the child process to  the	parent
       process.	  Otherwise,  a	value of -1 is returned	to the parent process,
       no child	process	is created, and	the global variable _e_r_r_n_o  is  set  to
       indicate	the error.

EERRRROORRSS
       _F_o_r_k  will  fail	and no child process will be created if	one or more of
       the following are true:

       [EAGAIN]	      The system-imposed limit on the  total  number  of  pro-
		      cesses under execution would be exceeded.	 This limit is
		      configuration-dependent.

       [EAGAIN]	      The system-imposed limit MAXUPRC (_<_s_y_s_/_p_a_r_a_m_._h_>_) on  the
		      total  number  of	 processes under execution by a	single
		      user would be exceeded.

       [ENOMEM]	      There is insufficient swap space for the new process.

SSEEEE AALLSSOO
       execve(2), wait(2)



3rd Berkeley Distribution	 May 22, 1986			       FORK(2)
