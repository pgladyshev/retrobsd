GETRUSAGE(2)		      System Calls Manual		  GETRUSAGE(2)



NNAAMMEE
       getrusage - get information about resource utilization

SSYYNNOOPPSSIISS
       ##iinncclluuddee	<<ssyyss//ttiimmee..hh>>
       ##iinncclluuddee	<<ssyyss//rreessoouurrccee..hh>>

       ##ddeeffiinnee RRUUSSAAGGEE__SSEELLFF	00	  //** ccaalllliinngg pprroocceessss **//
       ##ddeeffiinnee RRUUSSAAGGEE__CCHHIILLDDRREENN	--11	  //** tteerrmmiinnaatteedd	cchhiilldd pprroocceesssseess	**//

       ggeettrruussaaggee((wwhhoo,, rruussaaggee))
       iinntt wwhhoo;;
       ssttrruucctt rruussaaggee **rruussaaggee;;

DDEESSCCRRIIPPTTIIOONN
       _G_e_t_r_u_s_a_g_e  returns information describing the resources utilized	by the
       current process,	or all its terminated child processes.	The _w_h_o	param-
       eter  is	 one  of  RUSAGE_SELF or RUSAGE_CHILDREN.  The buffer to which
       _r_u_s_a_g_e points will be filled in with the	following structure:

	      struct  rusage {
		      struct timeval ru_utime;	      /* user time used	*/
		      struct timeval ru_stime;	      /* system	time used */
		      long    ru_maxrss;
		      long    ru_ixrss;		      /* integral shared text memory size */
		      long    ru_idrss;		      /* integral unshared data	size */
		      long    ru_isrss;		      /* integral unshared stack size */
		      long    ru_minflt;	      /* page reclaims */
		      long    ru_majflt;	      /* page faults */
		      long    ru_ovly;		      /* overlay changes */
		      long    ru_nswap;		      /* swaps */
		      long    ru_inblock;	      /* block input operations	*/
		      long    ru_oublock;	      /* block output operations */
		      long    ru_msgsnd;	      /* messages sent */
		      long    ru_msgrcv;	      /* messages received */
		      long    ru_nsignals;	      /* signals received */
		      long    ru_nvcsw;		      /* voluntary context switches */
		      long    ru_nivcsw;	      /* involuntary context switches */
	      };

       The fields are interpreted as follows:

       ru_utime	      the total	amount of time spent executing in user mode.

       ru_stime	      the total	amount of time spent in	the  system  executing
		      on behalf	of the process(es).

       ru_maxrss      the maximum resident set size utilized (in kilobytes).

       ru_ixrss	      an "integral" value indicating the amount	of memory used
		      by the text segment that was  also  shared  among	 other
		      processes.   This	 value	is expressed in	units of kilo-
		      bytes * seconds-of-execution and is calculated  by  sum-
		      ming  the	number of shared memory	pages in use each time
		      the internal system clock	ticks and then averaging  over
		      1	second intervals.

       ru_idrss	      an  integral  value  of  the  amount  of unshared	memory
		      residing in the data segment of a	process	(expressed  in
		      units of kilobytes * seconds-of-execution).

       ru_isrss	      an  integral  value  of  the  amount  of unshared	memory
		      residing in the stack segment of a process (expressed in
		      units of kilobytes * seconds-of-execution).

       ru_minflt      the  number  of  page  faults  serviced  without any I/O
		      activity;	here I/O activity is avoided by	"reclaiming" a
		      page frame from the list of pages	awaiting reallocation.

       ru_majflt      the  number  of  page  faults serviced that required I/O
		      activity.

       the number of times a process requested a text overlay switch -
		      only available under 2_10BSD.

       ru_nswap	      the number of times a process was	"swapped" out of  main
		      memory.

       ru_inblock     the  number  of  times  the  file	 system	had to perform
		      input.

       ru_outblock    the number of times the file system had to perform  out-
		      put.

       ru_msgsnd      the number of IPC	messages sent.

       ru_msgrcv      the number of IPC	messages received.

       ru_nsignals    the number of signals delivered.

       ru_nvcsw	      the  number  of times a context switch resulted due to a
		      process voluntarily giving up the	processor  before  its
		      time  slice was completed	(usually to await availability
		      of a resource).

       ru_nivcsw      the number of times a context switch resulted due	 to  a
		      higher priority process becoming runnable	or because the
		      current process exceeded its time	slice.

NNOOTTEESS
       The numbers _r_u___i_n_b_l_o_c_k and _r_u___o_u_t_b_l_o_c_k account only for real I/O;  data
       supplied	 by the	caching	mechanism is charged only to the first process
       to read or write	the data.

EERRRROORRSS
       The possible errors for _g_e_t_r_u_s_a_g_e are:

       [EINVAL]	      The _w_h_o parameter	is not a valid value.

       [EFAULT]	      The address specified by the _r_u_s_a_g_e parameter is not  in
		      a	valid part of the process address space.

SSEEEE AALLSSOO
       gettimeofday(2),	wait(2)

BBUUGGSS
       There  is  no  way to obtain information	about a	child process that has
       not yet terminated.



4th Berkeley Distribution	 May 13, 1986			  GETRUSAGE(2)
