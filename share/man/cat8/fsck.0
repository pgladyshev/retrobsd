FSCK(8)			    System Manager's Manual		       FSCK(8)



NNAAMMEE
       fsck - file system consistency check and	interactive repair

SSYYNNOOPPSSIISS
       ffsscckk --pp[	# ] [ filesystem ...  ]
       ffsscckk [ --yy ] [ --nn	] [ --ssX	] [ --SSX	] [ --tt filename	] [ filesystem ] ...

DDEESSCCRRIIPPTTIIOONN
       The  first  form	 of  _f_s_c_k preens a standard set	of file	systems	or the
       specified file systems.	It is normally used in the script _/_e_t_c_/_r_c dur-
       ing  automatic reboot.  In this case _f_s_c_k reads the table _/_e_t_c_/_f_s_t_a_b to
       determine which file systems to check.  It uses the  information	 there
       to  inspect groups of disks in parallel taking maximum advantage	of i/o
       overlap to check	the file systems as quickly  as	 possible.   Normally,
       the  root  file system will be checked on pass 1, other ``root''	(``a''
       partition) file systems on pass 2, other	small file systems on separate
       passes  (e.g.  the ``d''	file systems on	pass 3 and the ``e'' file sys-
       tems on pass 4),	and finally the	large user file	systems	 on  the  last
       pass,  e.g.  pass  5.   Only  one  file system from each	disk should be
       checked in each pass.  A	pass number of 0 in fstab causes a disk	to not
       be  checked;  similarly partitions which	are not	shown as to be mounted
       ``rw'' or ``ro''	are not	checked.  A number or range of numbers may  be
       given  after  the --pp to start or	end the	check at a specified pass num-
       ber.  A single number specifies the starting pass (e.g. -p2 or -p2-); a
       range specifies the starting and	endig passes (-p2-4).  A missing start
       means to	start with pass	1 (-p-2).  These can be	used to	stop  fsck  to
       mount  a	 temporary  file  system before	continuing the check on	larger
       file systems requiring scratch files.

       The system normally takes care that only	a restricted class of  innocu-
       ous  inconsistencies  can  happen  unless hardware or software failures
       intervene.  These are limited to	the following:

	      Unreferenced inodes

	      Link counts in inodes too	large

	      Missing blocks in	the free list

	      Blocks in	the free list also in files

	      Counts in	the superblock wrong

	      Allocated	inodes in the free inode list

       These are the only inconsistencies which	_f_s_c_k with the --pp  option  will
       correct;	 if  it	 encounters  other  inconsistencies,  it exits with an
       abnormal	return status and an automatic reboot  will  then  fail.   For
       each  corrected inconsistency one or more lines will be printed identi-
       fying the file system on	which the correction will take place, and  the
       nature of the correction.  After	successfully correcting	a file system,
       _f_s_c_k will print the number of files on that file	system and the	number
       of used and free	blocks.	 WWaarrnniinngg:: kernel changes are required to limit
       the types of inconsistencies, and ffsscckk --pp makes assumptions  about  the
       kernel's	 actions  in  repairing	these.	Vmunix,	PDP-11 2.9BSD with the
       UCB_FSFIX option	and PDP-11 2.10BSD Unix	kernels	have  the  appropriate
       modifications; the --pp option should not be used on other	systems.

       Without	the --pp option, _f_s_c_k audits and interactively repairs inconsis-
       tent conditions for file	systems.  If the file system  is  inconsistent
       the  operator  is  prompted  for	 concurrence before each correction is
       attempted.  It should be	noted that a number of the corrective  actions
       which  are  not fixable under the --pp option will	result in some loss of
       data.  The amount and severity of data lost may be determined from  the
       diagnostic  output.  The	default	action for each	consistency correction
       is to wait for the operator to respond yyeess or nnoo.  If the operator does
       not have	write permission _f_s_c_k will default to a	--nn action.

       _F_s_c_k  has  more consistency checks than its predecessors	_c_h_e_c_k_, _d_c_h_e_c_k_,
       _f_c_h_e_c_k_, and _i_c_h_e_c_k combined.

       The following flags are interpreted by _f_s_c_k_.

       --yy    Assume a yes response to all questions asked by _f_s_c_k_; this	should
	     be	 used with great caution as this is a free license to continue
	     after essentially unlimited trouble has been encountered.

       --nn    Assume a no response to all questions asked by _f_s_c_k_; do not  open
	     the file system for writing.

       --ss_X   Ignore  the  actual free list and (unconditionally) reconstruct a
	     new one by	rewriting the superblock of the	file system.  The file
	     system  should  be	 unmounted  while this is done;	if this	is not
	     possible, care should be taken that the system is	quiescent  and
	     that  it  is rebooted immediately afterwards.  This precaution is
	     necessary so that the old,	bad, in-core copy  of  the  superblock
	     will not continue to be used, or written on the file system.

	     The --ss_X option allows for creating	an optimal free	list organiza-
	     tion.  The	following forms	of _X are supported for	the  following
	     devices:

		  -s3 (RP03)
		  -s4 (RP04, RP05, RP06)
		  -sBlocks-per-cylinder::Blocks-to-skip (for anything else)

	     If	 _X is not given, the values used when the file system was cre-
	     ated are used.  If	these values  were  not	 specified,  then  the
	     value _4_0_0_:_9 is used.

       --SS_X   Conditionally  reconstruct	the free list. This option is like --ss_X
	     above except that the free	list is	rebuilt	only if	there were  no
	     discrepancies  discovered in the file system. Using --SS will force
	     a no response to all questions asked by  _f_s_c_k_.   This  option  is
	     useful  for  forcing  free	 list reorganization on	uncontaminated
	     file systems.

       --tt    If	_f_s_c_k cannot obtain enough memory to keep its tables, it	uses a
	     scratch  file.  If	 the --tt	option is specified, the file named in
	     the next argument is used as the scratch file, if needed. Without
	     the  --tt  flag,  _f_s_c_k will prompt the operator for the name	of the
	     scratch file. The file chosen should not be on  the  file	system
	     being checked, and	if it is not a special file or did not already
	     exist, it is removed when _f_s_c_k completes.

       If no file systems are given to _f_s_c_k then a default list	of  file  sys-
       tems is read from the file _/_e_t_c_/_f_s_t_a_b.

       Inconsistencies checked are as follows:

       1.    Blocks claimed by more than one inode or the free list.
       2.    Blocks  claimed by	an inode or the	free list outside the range of
	     the file system.
       3.    Incorrect link counts.
       4.    Size checks:
		   Directory size not 16-byte aligned.
       5.    Bad inode format.
       6.    Blocks not	accounted for anywhere.
       7.    Directory checks:
		   File	pointing to unallocated	inode.
		   Inode number	out of range.
       8.    Super Block checks:
		   More	than 65536 inodes.
		   More	blocks for inodes than there are in the	file system.
       9.    Bad free block list format.
       10.   Total free	block and/or free inode	count incorrect.
       11.   Allocated inodes on the free inode	list in	the superblock.

       Orphaned	files and directories (allocated but unreferenced)  are,  with
       the   operator's	 concurrence,  reconnected  by	placing	 them  in  the
       _l_o_s_t_+_f_o_u_n_d directory.  The name assigned	is the inode number. The  only
       restriction  is that the	directory _l_o_s_t_+_f_o_u_n_d must preexist in the root
       of the file system being	checked	and must have  empty  slots  in	 which
       entries	can  be	 made.	 This  can  be accomplished manually by	making
       _l_o_s_t_+_f_o_u_n_d, copying a number of files to	the directory, and then	remov-
       ing  them (before _f_s_c_k is executed).  _M_k_f_s(8) will automatically	create
       a _l_o_s_t_+_f_o_u_n_d directory.

       Checking	the raw	device is  almost  always  faster.   The  root	device
       should not be checked using the raw device, however, since it cannot be
       unmounted.

FFIILLEESS
       /etc/fstab	   default list	of file	systems	to check

DDIIAAGGNNOOSSTTIICCSS
       The diagnostics produced	by _f_s_c_k	are intended to	 be  self-explanatory.
       The  exit  codes	 with  the  --pp	option are 0 (no problems that weren't
       fixed), 4 (root file system was modified), 8 (problems that couldn't be
       fixed) and 12 (_f_s_c_k was interrupted).

SSEEEE AALLSSOO
       filsys(5), fstab(5), crash(8), mkfs(8), mklost+found(8),	reboot(8)
       T. J. Kowalski, _F_S_C_K _- _T_h_e _U_N_I_X _F_i_l_e _S_y_s_t_e_m _C_h_e_c_k _P_r_o_g_r_a_m

BBUUGGSS
       Inode  numbers  for  ..  and ....  in each directory should	be checked for
       validity.



3rd Berkeley Distribution					       FSCK(8)
