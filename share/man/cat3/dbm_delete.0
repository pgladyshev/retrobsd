NDBM(3)			   Library Functions Manual		       NDBM(3)



NNAAMMEE
       dbm_open,  dbm_close,  dbm_fetch,  dbm_store, dbm_delete, dbm_firstkey,
       dbm_nextkey, dbm_error, dbm_clearerr - data base	subroutines

SSYYNNOOPPSSIISS
       ##iinncclluuddee	<<nnddbbmm..hh>>

       ttyyppeeddeeff ssttrruucctt {{
	   cchhaarr	**ddppttrr;;
	   iinntt ddssiizzee;;
       }} ddaattuumm;;

       DDBBMM **ddbbmm__ooppeenn((ffiillee,, ffllaaggss,, mmooddee))
	   cchhaarr	**ffiillee;;
	   iinntt ffllaaggss,, mmooddee;;

       vvooiidd ddbbmm__cclloossee((ddbb))
	   DDBBMM **ddbb;;

       ddaattuumm ddbbmm__ffeettcchh((ddbb,, kkeeyy))
	   DDBBMM **ddbb;;
	   ddaattuumm kkeeyy;;

       iinntt ddbbmm__ssttoorree((ddbb,, kkeeyy,, ccoonntteenntt,, ffllaaggss))
	   DDBBMM **ddbb;;
	   ddaattuumm kkeeyy,, ccoonntteenntt;;
	   iinntt ffllaaggss;;

       iinntt ddbbmm__ddeelleettee((ddbb,, kkeeyy))
	   DDBBMM **ddbb;;
	   ddaattuumm kkeeyy;;

       ddaattuumm ddbbmm__ffiirrssttkkeeyy((ddbb))
	   DDBBMM **ddbb;;

       ddaattuumm ddbbmm__nneexxttkkeeyy((ddbb))
	   DDBBMM **ddbb;;

       iinntt ddbbmm__eerrrroorr((ddbb))
	   DDBBMM **ddbb;;

       iinntt ddbbmm__cclleeaarreerrrr((ddbb))
	   DDBBMM **ddbb;;

DDEESSCCRRIIPPTTIIOONN
       These functions maintain	key/content pairs in a data base.   The	 func-
       tions  will  handle  very  large	 (a billion blocks) databases and will
       access a	keyed item in one or two file system accesses.	 This  package
       replaces	the earlier _d_b_m(3x) library, which managed only	a single data-
       base.

       _K_e_ys and	_c_o_n_t_e_n_ts are described by the _d_a_t_u_m typedef.  A	 _d_a_t_u_m	speci-
       fies  a	string	of  _d_s_i_z_e  bytes pointed to by _d_p_t_r_.  Arbitrary	binary
       data, as	well as	normal ASCII strings, are allowed.  The	data  base  is
       stored  in two files.  One file is a directory containing a bit map and
       has `.dir' as its suffix.  The second file contains all	data  and  has
       `.pag' as its suffix.

       Before a	database can be	accessed, it must be opened by _d_b_m___o_p_e_n.  This
       will open and/or	create the files _f_i_l_e..ddiirr and  _f_i_l_e..ppaagg	 depending  on
       the flags parameter (see	_o_p_e_n(2)).

       Once  open,  the	 data  stored under a key is accessed by _d_b_m___f_e_t_c_h and
       data is placed under a key by _d_b_m___s_t_o_r_e.	 The _f_l_a_g_s field can be	either
       DDBBMM__IINNSSEERRTT  or  DDBBMM__RREEPPLLAACCEE..   DDBBMM__IINNSSEERRTT  will only insert new entries
       into the	database and will not change an	existing entry with  the  same
       key.   DDBBMM__RREEPPLLAACCEE  will	 replace  an existing entry if it has the same
       key.  A key (and	its associated contents) is deleted by _d_b_m___d_e_l_e_t_e.   A
       linear  pass  through all keys in a database may	be made, in an (appar-
       ently)  random  order,  by  use	of   _d_b_m___f_i_r_s_t_k_e_y   and	  _d_b_m___n_e_x_t_k_e_y.
       _D_b_m___f_i_r_s_t_k_e_y  will  return  the first key in the	database.  _D_b_m___n_e_x_t_k_e_y
       will return the next key	in the database.  This code will traverse  the
       data base:

	      ffoorr  (key	 =  dbm_firstkey(db); key.dptr != NULL;	key = dbm_nex-
	      tkey(db))

       _D_b_m___e_r_r_o_r returns non-zero when an error	has occurred reading or	 writ-
       ing the database.  _D_b_m___c_l_e_a_r_e_r_r resets the error	condition on the named
       database.

DDIIAAGGNNOOSSTTIICCSS
       All functions that return an _i_n_t	indicate errors	with negative  values.
       A  zero	return	indicates  ok.	 Routines that return a	_d_a_t_u_m indicate
       errors with a null (0) _d_p_t_r_.  If	_d_b_m___s_t_o_r_e called with a	_f_l_a_g_s value of
       DDBBMM__IINNSSEERRTT finds	an existing entry with the same	key it returns 1.

BBUUGGSS
       The  `.pag'  file will contain holes so that its	apparent size is about
       four times its actual content.  Older UNIX systems may create real file
       blocks  for  these holes	when touched.  These files cannot be copied by
       normal means (cp, cat, tp, tar, ar) without filling in the holes.

       _D_p_t_r pointers returned by these subroutines point into  static  storage
       that is changed by subsequent calls.

       The sum of the sizes of a key/content pair must not exceed the internal
       block size (currently 4096 bytes).  Moreover all	key/content pairs that
       hash  together  must  fit  on a single block.  _D_b_m___s_t_o_r_e	will return an
       error in	the event that a disk block fills with inseparable data.

       _D_b_m___d_e_l_e_t_e does not physically reclaim file  space,  although  it  does
       make it available for reuse.

       The  order of keys presented by _d_b_m___f_i_r_s_t_k_e_y and	_d_b_m___n_e_x_t_k_e_y depends on
       a hashing function, not on anything interesting.

SSEEEE AALLSSOO
       dbm(3X)



4.3 Berkeley Distribution	 May 20, 1986			       NDBM(3)
