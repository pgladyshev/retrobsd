MALLOC(3)		   Library Functions Manual		     MALLOC(3)



NNAAMMEE
       malloc, free, realloc, calloc, alloca - memory allocator

SSYYNNOOPPSSIISS
       cchhaarr **mmaalllloocc((ssiizzee))
       uunnssiiggnneedd	ssiizzee;;

       ffrreeee((ppttrr))
       cchhaarr **ppttrr;;

       cchhaarr **rreeaalllloocc((ppttrr,, ssiizzee))
       cchhaarr **ppttrr;;
       uunnssiiggnneedd	ssiizzee;;

       cchhaarr **ccaalllloocc((nneelleemm,, eellssiizzee))
       uunnssiiggnneedd	nneelleemm,, eellssiizzee;;

       cchhaarr **aallllooccaa((ssiizzee))
       iinntt ssiizzee;;

DDEESSCCRRIIPPTTIIOONN
       _M_a_l_l_o_c  and  _f_r_e_e  provide a general-purpose memory allocation package.
       _M_a_l_l_o_c returns a	pointer	to a block of at least _s_i_z_e bytes beginning on
       a word boundary.

       The  argument  to  _f_r_e_e is a pointer to a block previously allocated by
       _m_a_l_l_o_c; this space is made available for	further	 allocation,  but  its
       contents	are left undisturbed.

       Needless	 to  say,  grave disorder will result if the space assigned by
       _m_a_l_l_o_c is overrun or if some random number is handed to _f_r_e_e.

       _M_a_l_l_o_c maintains	multiple lists of free blocks according	to size, allo-
       cating  space from the appropriate list.	 It calls _s_b_r_k (see _b_r_k(2)) to
       get more	memory from the	system when there is no	suitable space already
       free.

       _R_e_a_l_l_o_c	changes	 the size of the block pointed to by _p_t_r to _s_i_z_e bytes
       and returns a pointer to	the (possibly moved) block.  The contents will
       be unchanged up to the lesser of	the new	and old	sizes.

       In  order  to  be compatible with older versions, _r_e_a_l_l_o_c also works if
       _p_t_r points to a block freed since the last call of _m_a_l_l_o_c_,  _r_e_a_l_l_o_c  or
       _c_a_l_l_o_c;	sequences  of _f_r_e_e_, _m_a_l_l_o_c and _r_e_a_l_l_o_c were previously used to
       attempt storage compaction.  This procedure is no longer	recommended.

       _C_a_l_l_o_c allocates	space for an array of _n_e_l_e_m elements of	 size  _e_l_s_i_z_e_.
       The space is initialized	to zeros.

       _A_l_l_o_c_a  allocates _s_i_z_e bytes of space in	the stack frame	of the caller.
       This temporary space is automatically freed on return.

       Each of the allocation routines returns a  pointer  to  space  suitably
       aligned	(after	possible  pointer coercion) for	storage	of any type of
       object.	If the space is	of _p_a_g_e_s_i_z_e or	larger,	 the  memory  returned
       will be page-aligned.

SSEEEE AALLSSOO
       brk(2), pagesize(2)

DDIIAAGGNNOOSSTTIICCSS
       _M_a_l_l_o_c_,	_r_e_a_l_l_o_c	 and  _c_a_l_l_o_c  return a null pointer (0)	if there is no
       available memory	or if the arena	has been detectably corrupted by stor-
       ing  outside  the bounds	of a block.  _M_a_l_l_o_c may	be recompiled to check
       the arena very stringently on every transaction;	 those	sites  with  a
       source  code  license  may check	the source code	to see how this	can be
       done.

BBUUGGSS
       When _r_e_a_l_l_o_c returns 0, the block pointed to by _p_t_r may be destroyed.

       The current implementation of _m_a_l_l_o_c does not  always  fail  gracefully
       when system memory limits are approached.  It may fail to allocate mem-
       ory when	larger free blocks could be broken  up,	 or  when  limits  are
       exceeded	 because  the  size  is	rounded	up.  It	is optimized for sizes
       that are	powers of two.

       _A_l_l_o_c_a is machine dependent; its	use is discouraged.



4th Berkeley Distribution	 May 14, 1986			     MALLOC(3)
