SETJMP(3)		   Library Functions Manual		     SETJMP(3)



NNAAMMEE
       setjmp, longjmp - non-local goto

SSYYNNOOPPSSIISS
       ##iinncclluuddee	<<sseettjjmmpp..hh>>

       sseettjjmmpp((eennvv))
       jjmmpp__bbuuff eennvv;;

       lloonnggjjmmpp((eennvv,, vvaall))
       jjmmpp__bbuuff eennvv;;

       __sseettjjmmpp((eennvv))
       jjmmpp__bbuuff eennvv;;

       __lloonnggjjmmpp((eennvv,, vvaall))
       jjmmpp__bbuuff eennvv;;

DDEESSCCRRIIPPTTIIOONN
       These  routines	are  useful  for  dealing  with	 errors	and interrupts
       encountered in a	low-level subroutine of	a program.

       _S_e_t_j_m_p saves its	stack environment in _e_n_v for later use by _l_o_n_g_j_m_p_.  It
       returns value 0.

       _L_o_n_g_j_m_p	restores the environment saved by the last call	of _s_e_t_j_m_p.  It
       then returns in such a way that execution continues as if the  call  of
       _s_e_t_j_m_p  had  just  returned  the	value _v_a_l to the function that invoked
       _s_e_t_j_m_p_, which must not itself have returned in the interim.  All	acces-
       sible data have values as of the	time _l_o_n_g_j_m_p was called.

       _S_e_t_j_m_p  and  _l_o_n_g_j_m_p save and restore the signal	mask _s_i_g_m_a_s_k(2), while
       ___s_e_t_j_m_p and ___l_o_n_g_j_m_p manipulate only the	C stack	and registers.

EERRRROORRSS
       If the contents of the jjmmpp__bbuuff are corrupted, or	correspond to an envi-
       ronment that has	already	returned, _l_o_n_g_j_m_p calls	the routine _l_o_n_g_j_m_p_e_r_-
       _r_o_r.  If	_l_o_n_g_j_m_p_e_r_r_o_r returns the program is aborted.  The default ver-
       sion  of	 _l_o_n_g_j_m_p_e_r_r_o_r prints the message ``longjmp botch'' to standard
       error and returns.  User	programs wishing to exit more  gracefully  can
       write their own versions	of _l_o_n_g_j_m_p_e_r_r_o_r.

SSEEEE AALLSSOO
       sigvec(2), sigstack(2), signal(3)

NNOOTTEESS  ((PPDDPP--1111))
       On the PDP-11, _l_o_n_g_j_m_p_e_r_r_o_r is called as	___l_j_e_r_r.	 This difference stems
       from the	limited	name size of the PDP-11	 that  requires	 all  external
       names  to  be  unique  within  the  first  seven	 characters.  However,
       <_s_e_t_j_m_p_._h> automatically	translates _l_o_n_g_j_m_p_e_r_r_o_r	to _l_j_e_r_r_o_r and	should
       be included before any definition _l_o_n_g_j_m_p_e_r_r_o_r.

       The PDP-11 implementation also contains a subtle	bug that occurs	when a
       routine containing a _s_e_t_j_m_p has _r_e_g_i_s_t_e_r	variables.  The	bug  sometimes
       causes  those  variables	 to  be	given invalid values when a longjmp is
       made back to the	 routine.   _R_e_g_i_s_t_e_r  variables	 should	 therefore  be
       avoided in routines containing _s_e_t_j_m_p_s.

       And finally, _longjmp may sometimes die fatally.	 Sorry.



4th Berkeley Distribution	January	9, 1986			     SETJMP(3)
