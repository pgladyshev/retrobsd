MONITOR(3)		   Library Functions Manual		    MONITOR(3)



NNAAMMEE
       monitor,	monstartup, moncontrol - prepare execution profile

SSYYNNOOPPSSIISS
       mmoonniittoorr((lloowwppcc,, hhiigghhppcc,, bbuuffffeerr,, bbuuffssiizzee,, nnffuunncc))
       iinntt ((**lloowwppcc))(()),, ((**hhiigghhppcc))(());;
       sshhoorrtt bbuuffffeerr[[]];;

       mmoonnssttaarrttuupp((lloowwppcc,, hhiigghhppcc))
       iinntt ((**lloowwppcc))(()),, ((**hhiigghhppcc))(());;

       mmoonnccoonnttrrooll((mmooddee))

DDEESSCCRRIIPPTTIIOONN
       There  are  two	different forms	of monitoring available: An executable
       program created by:

	    cc -p . . .

       automatically includes calls for	the _p_r_o_f(1) monitor  and  includes  an
       initial	call  to  its start-up routine _m_o_n_s_t_a_r_t_u_p with default parame-
       ters; _m_o_n_i_t_o_r need not be called	explicitly except to gain fine control
       over profil buffer allocation.  An executable program created by:

	    cc -pg . . .

       automatically includes calls for	the _g_p_r_o_f(1) monitor.

       _M_o_n_s_t_a_r_t_u_p  is  a  high level interface to _p_r_o_f_i_l(2).  _L_o_w_p_c and	_h_i_g_h_p_c
       specify the address range that is to be	sampled;  the  lowest  address
       sampled	is  that  of _l_o_w_p_c and the highest is just below _h_i_g_h_p_c.  _M_o_n_-
       _s_t_a_r_t_u_p allocates space using _s_b_r_k(2) and passes	 it  to	 _m_o_n_i_t_o_r  (see
       below) to record	a histogram of periodically sampled values of the pro-
       gram counter, and of counts of calls of certain functions, in the  buf-
       fer.   Only calls of functions compiled with the	profiling option --pp of
       _c_c(1) are recorded.

       To profile the entire program, it is sufficient to use

	    extern etext();
	    . .	.
	    monstartup((int) 2,	etext);

       _E_t_e_x_t lies just above all the program text, see _e_n_d(3).

       To stop execution monitoring and	write the results on the file _m_o_n_._o_u_t_,
       use

	    monitor(0);

       then _p_r_o_f(1) can	be used	to examine the results.

       _M_o_n_c_o_n_t_r_o_l  is  used to selectively control profiling within a program.
       This works with either _p_r_o_f(1) or _g_p_r_o_f(1) type	profiling.   When  the
       program	starts,	profiling begins.  To stop the collection of histogram
       ticks and call counts use _m_o_n_c_o_n_t_r_o_l(0);	to resume  the	collection  of
       histogram  ticks	 and  call  counts use _m_o_n_c_o_n_t_r_o_l(1).  This allows the
       cost of particular operations to	be measured.  Note that	an output file
       will be produced	upon program exit irregardless of the state of _m_o_n_c_o_n_-
       _t_r_o_l_.

       _M_o_n_i_t_o_r is a low	level interface	to _p_r_o_f_i_l(2).  _L_o_w_p_c  and  _h_i_g_h_p_c  are
       the  addresses  of two functions; _b_u_f_f_e_r	is the address of a (user sup-
       plied) array of _b_u_f_s_i_z_e short integers.	At most	_n_f_u_n_c call counts  can
       be kept.	 For the results to be significant, especially where there are
       small, heavily used routines, it	is suggested that  the	buffer	be  no
       more  than  a  few  times  smaller than the range of locations sampled.
       _M_o_n_i_t_o_r divides the buffer into space to	record the histogram  of  pro-
       gram  counter  samples  over  the  range	 _l_o_w_p_c to _h_i_g_h_p_c, and space to
       record call counts of functions compiled	with the --pp option to _c_c(1).

       To profile the entire program, it is sufficient to use

	    extern etext();
	    . .	.
	    monitor((int) 2, etext, buf, bufsize, nfunc);

FFIILLEESS
       mon.out

SSEEEE AALLSSOO
       cc(1), prof(1), gprof(1), profil(2), sbrk(2)



4th Berkeley Distribution	 May 15, 1985			    MONITOR(3)
