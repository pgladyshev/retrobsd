SYSLOG(3)		   Library Functions Manual		     SYSLOG(3)



NNAAMMEE
       syslog ,	vsyslog	, openlog , closelog , setlogmask - control system log

SSYYNNOOPPSSIISS
       ##iinncclluuddee	<<ssyysslloogg..hh>>
       ##iinncclluuddee	<<vvaarraarrggss..hh>>

       vvooiidd ssyysslloogg((pprriioorriittyy,, mmeessssaaggee,, ......));;
       iinntt pprriioorriittyy;;
       cchhaarr **mmeessssaaggee;;

       vvooiidd vvssyysslloogg((pprriioorriittyy,, mmeessssaaggee,, aarrggss));;
       iinntt pprriioorriittyy;;
       cchhaarr **mmeessssaaggee;;
       vvaa__lliisstt aarrggss;;

       vvooiidd ooppeennlloogg((iiddeenntt,, llooggoopptt,, ffaacciilliittyy));;
       cchhaarr **iiddeenntt;;
       iinntt llooggoopptt;;
       iinntt ffaacciilliittyy;;

       vvooiidd cclloosseelloogg(());;

       iinntt sseettllooggmmaasskk((mmaasskkpprrii));;
       iinntt mmaasskkpprrii;;

DDEESSCCRRIIPPTTIIOONN
       The _s_y_s_l_o_g() function writes _m_e_s_s_a_g_e to the system message logger.  The
       message is then written to the system  console,	log  files,  logged-in
       users, or forwarded to other machines as	appropriate. (See _s_y_s_l_o_g_d(8)).

       The  message  is	identical to a _p_r_i_n_t_f(3) format	string,	except that %%mm
       is replaced by the current error	message	as denoted by the global vari-
       able  _e_r_r_n_o.  See _s_t_r_e_r_r_o_r(3)).	A trailing newline is added if none is
       present.

       The _v_s_y_s_l_o_g() function is an alternate form in which the	arguments have
       already	been captured using the	variable-length	argument facilities of
       _v_a_r_a_r_g_s(3).

       The message is tagged with  _p_r_i_o_r_i_t_y.   Priorities  are	encoded	 as  a
       _f_a_c_i_l_i_t_y	 and  a	 _l_e_v_e_l.	 The facility describes	the part of the	system
       generating the message.	The  level  is	selected  from	the  following
       _o_r_d_e_r_e_d (high to	low) list:

       LOG_EMERG       A  panic	 condition.  This is normally broadcast	to all
		       users.

       LOG_ALERT       A condition that	should be corrected immediately,  such
		       as a corrupted system database.

       LOG_CRIT	       Critical	conditions, e.g., hard device errors.

       LOG_ERR	       Errors.

       LOG_WARNING     Warning messages.

       LOG_NOTICE      Conditions  that	 are  not error	conditions, but	should
		       possibly	be handled specially.

       LOG_INFO	       Informational messages.

       LOG_DEBUG       Messages	that contain information normally of use  only
		       when debugging a	program.

       The  _o_p_e_n_l_o_g() function provides	for more specialized processing	of the
       messages	sent by	_s_y_s_l_o_g() and _v_s_y_s_l_o_g().	  The  parameter  _i_d_e_n_t	 is  a
       string that will	be prepended to	every message.	The _l_o_g_o_p_t argument is
       a bit field specifying logging options, which is	formed by  OORR''iinngg  one
       or more of the following	values:

       LOG_CONS	      If  _s_y_s_l_o_g  cannot  pass	the message to _s_y_s_l_o_g_d it will
		      attempt to write the message to the  console  (//ddeevv//ccoonn--
		      ssoollee).

       LOG_NDELAY     Open  the	 connection  to	_s_y_s_l_o_g_d	immediately.  Normally
		      the open is delayed until	the first message  is  logged.
		      Useful  for  programs  that  need	to manage the order in
		      which file descriptors are allocated.

       LOG_PERROR     Write the	message	to standard error output  as  well  to
		      the system log.

       LOG_PID	      Log the process id with each message: useful for identi-
		      fying instantiations of daemons.

       The _f_a_c_i_l_i_t_y parameter encodes a	default	facility to be assigned	to all
       messages	that do	not have an explicit facility encoded:

       LOG_AUTH	      The  authorization  system:  _l_o_g_i_n(1),  _s_u(1), _g_e_t_t_y(8),
		      etc.

       LOG_AUTHPRIV   The same as LLOOGG__AAUUTTHH ,, but logged	 to  a	file  readable
		      only by selected individuals.

       LOG_CRON	      The clock	daemon.

       LOG_DAEMON     System daemons, such as _r_o_u_t_e_d(8), that are not provided
		      for explicitly by	other facilities.

       LOG_KERN	      Messages generated by the	kernel.	 These cannot be  gen-
		      erated by	any user processes.

       LOG_LPR	      The   line  printer  spooling  system:  _l_p_r(1),  _l_p_c(8),
		      _l_p_d(8), etc.

       LOG_MAIL	      The mail system.

       LOG_NEWS	      The network news system.

       LOG_SYSLOG     Messages generated internally by _s_y_s_l_o_g_d(8).

       LOG_USER	      Messages generated by random user	 processes.   This  is
		      the default facility identifier if none is specified.

       LOG_UUCP	      The uucp system.

       LOG_LOCAL0     Reserved	 for  local  use.   Similarly  for  LLOOGG__LLOOCCAALL11
		      through LLOOGG__LLOOCCAALL77.

       The _c_l_o_s_e_l_o_g function can be used to close the log file.

       The _s_e_t_l_o_g_m_a_s_k function sets the	 log  priority	mask  to  _m_a_s_k_p_r_i  and
       returns	the previous mask.  Calls to _s_y_s_l_o_g with a priority not	set in
       _m_a_s_k_p_r_i are rejected.  The mask for an individual priority _p_r_i is  cal-
       culated	by the macro _L_O_G___M_A_S_K(pri).  The mask for all priorities up to
       and including _t_o_p_p_r_i is	given  by  the	macro  _L_O_G___U_P_T_O(toppri).   The
       default allows all priorities to	be logged.

RREETTUURRNN VVAALLUUEESS
       The  routines  _c_l_o_s_e_l_o_g(),  _o_p_e_n_l_o_g(), _s_y_s_l_o_g() and _v_s_y_s_l_o_g() return no
       value.

       The routine _s_e_t_l_o_g_m_a_s_k()	always returns the previous log	mask level.

EEXXAAMMPPLLEESS
	       syslog(LOG_ALERT, "who: internal	error 23");

	       openlog("ftpd",	     LOG_PID,	    LOG_DAEMON);       setlog-
	       mask(LOG_UPTO(LOG_ERR));	syslog(LOG_INFO, "Connection from host
	       %d", CallingHost);

	       syslog(LOG_INFO|LOG_LOCAL2, "foobar error: %m");

SSEEEE AALLSSOO
       _l_o_g_g_e_r_(_1_)_, _s_y_s_l_o_g_d_(_8_)

BBUUGGSS
       Under 2.11BSD the logfile //uussrr//aaddmm//mmeessssaaggeess is used if a	non networking
       kernel has been booted.	That file must be publically writeable in this
       case.

HHIISSTTOORRYY
       These functions appeared	in 4.2BSD.



4.2 Berkeley Distribution	 April 1, 1995			     SYSLOG(3)
