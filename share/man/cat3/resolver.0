RESOLVER(3)		   Library Functions Manual		   RESOLVER(3)



NNAAMMEE
       res_mkquery, res_send, res_init,	dn_comp, dn_expand - resolver routines

SSYYNNOOPPSSIISS
       ##iinncclluuddee	<<ssyyss//ttyyppeess..hh>>
       ##iinncclluuddee	<<nneettiinneett//iinn..hh>>
       ##iinncclluuddee	<<aarrppaa//nnaammeesseerr..hh>>
       ##iinncclluuddee	<<rreessoollvv..hh>>

       rreess__mmkkqquueerryy((oopp,, ddnnaammee,, ccllaassss,, ttyyppee,, ddaattaa,, ddaattaalleenn,, nneewwrrrr,, bbuuff,, bbuufflleenn))
       iinntt oopp;;
       cchhaarr **ddnnaammee;;
       iinntt ccllaassss,, ttyyppee;;
       cchhaarr **ddaattaa;;
       iinntt ddaattaalleenn;;
       ssttrruucctt rrrreecc **nneewwrrrr;;
       cchhaarr **bbuuff;;
       iinntt bbuufflleenn;;

       rreess__sseenndd((mmssgg,, mmssgglleenn,, aannsswweerr,, aannsslleenn))
       cchhaarr **mmssgg;;
       iinntt mmssgglleenn;;
       cchhaarr **aannsswweerr;;
       iinntt aannsslleenn;;

       rreess__iinniitt(())

       ddnn__ccoommpp((eexxpp__ddnn,, ccoommpp__ddnn,,	lleennggtthh,,	ddnnppttrrss,,	llaassttddnnppttrr))
       cchhaarr **eexxpp__ddnn,, **ccoommpp__ddnn;;
       iinntt lleennggtthh;;
       cchhaarr ****ddnnppttrrss,, ****llaassttddnnppttrr;;

       ddnn__eexxppaanndd((mmssgg,, eeoommoorriigg,, ccoommpp__ddnn,,	eexxpp__ddnn,,	lleennggtthh))
       cchhaarr **mmssgg,, **eeoommoorriigg,, **ccoommpp__ddnn,, eexxpp__ddnn;;
       iinntt lleennggtthh;;

DDEESSCCRRIIPPTTIIOONN
       These  routines	are  used for making, sending and interpreting packets
       for use with Internet domain name servers.  Global information that  is
       used  by	 the  resolver routines	is kept	in the variable	___r_e_s.  Most of
       the values have reasonable defaults and can be ignored.	Options	stored
       in  ___r_e_s_._o_p_t_i_o_n_s	 are  defined in _r_e_s_o_l_v_._h and are as follows.  Options
       are stored a simple bit mask  containing	 the  bitwise  ``or''  of  the
       options enabled.

       RES_INIT
	      True  if the initial name	server address and default domain name
	      are initialized (i.e., _r_e_s___i_n_i_t has been called).

       RES_DEBUG
	      Print debugging messages.

       RES_AAONLY
	      Accept authoritative answers only.  With this  option,  _r_e_s___s_e_n_d
	      should  continue until it	finds an authoritative answer or finds
	      an error.	 Currently this	is not implemented.

       RES_USEVC
	      Use TCP connections for queries instead of UDP datagrams.

       RES_STAYOPEN
	      Used with	RES_USEVC to keep  the	TCP  connection	 open  between
	      queries.	This is	useful only in programs	that regularly do many
	      queries.	UDP should be the normal mode used.

       RES_IGNTC
	      Unused currently (ignore truncation errors,  i.e.,  don't	 retry
	      with TCP).

       RES_RECURSE
	      Set  the recursion-desired bit in	queries.  This is the default.
	      (	_r_e_s___s_e_n_d does not do iterative queries and  expects  the  name
	      server to	handle recursion.)

       RES_DEFNAMES
	      If  set, _r_e_s___m_k_q_u_e_r_y will	append the default domain name to sin-
	      gle-component names (those that do not contain a dot).  This  is
	      the default.

       RES_DNSRCH
	      If this option is	set, the standard host lookup routine _g_e_t_h_o_s_t_-
	      _b_y_n_a_m_e(3)	will search for	host names in the current  domain  and
	      in parent	domains; see _h_o_s_t_n_a_m_e(7).

       _R_e_s___i_n_i_t

       reads  the  initialization  file	to get the default domain name and the
       Internet	address	of the initial hosts running the name server.  If this
       line   does  not	 exist,	 the  host  running  the  resolver  is	tried.
       _R_e_s___m_k_q_u_e_r_y makes a standard  query  message  and  places  it  in  _b_u_f.
       _R_e_s___m_k_q_u_e_r_y  will  return  the  size of the query or -1 if the query is
       larger than _b_u_f_l_e_n.  _O_p is usually QUERY	but can	be any	of  the	 query
       types  defined  in _n_a_m_e_s_e_r_._h.  _D_n_a_m_e is the domain name.	 If _d_n_a_m_e con-
       sists of	a single label and  the	 RES_DEFNAMES  flag  is	 enabled  (the
       default),  the current domain name will be appended to _d_n_a_m_e.  The cur-
       rent domain name	is defined by the hostname or is specified in a	system
       file;  it  can  be  overridden by the environment variable LOCALDOMAIN.
       _N_e_w_r_r is	currently unused but is	intended for making update messages.

       _R_e_s___s_e_n_d	sends a	query to name servers and returns an answer.  It  will
       call  _r_e_s___i_n_i_t if RES_INIT is not set, send the query to	the local name
       server, and handle timeouts and retries.	 The length of the message  is
       returned, or -1 if there	were errors.

       _D_n___e_x_p_a_n_d  expands  the compressed domain name _c_o_m_p___d_n to a full	domain
       name.  Expanded names are converted to upper case.  _M_s_g is a pointer to
       the  beginning  of the message, _e_x_p___d_n is a pointer to a	buffer of size
       _l_e_n_g_t_h for the result.  The size	of compressed name is returned	or  -1
       if there	was an error.

       _D_n___c_o_m_p	compresses  the	 domain	 name _e_x_p___d_n and stores	it in _c_o_m_p___d_n.
       The size	of the compressed name is returned or -1 if there were errors.
       _l_e_n_g_t_h  _i_s  _t_h_e	_s_i_z_e  _o_f _t_h_e _a_r_r_a_y _p_o_i_n_t_e_d _t_o _b_y _c_o_m_p___d_n.  _D_n_p_t_r_s is a
       list of pointers	to previously compressed names in the current message.
       The  first  pointer  points  to to the beginning	of the message and the
       list ends with NULL.  _l_a_s_t_d_n_p_t_r is a pointer to the end	of  the	 array
       pointed to _d_n_p_t_r_s.  A side effect is to update the list of pointers for
       labels inserted into the	message	by _d_n___c_o_m_p as the name is  compressed.
       If  _d_n_p_t_r is NULL, names	are not	compressed.  If	_l_a_s_t_d_n_p_t_r is NULL, the
       list of labels is not updated.

FFIILLEESS
       /etc/resolv.conf	   see resolver(5)

SSEEEE AALLSSOO
       gethostbyname(3), named(8), resolver(5),	hostname(7),
       RFC882, RFC883, RFC973, RFC974,
       SMM:11 Name Server Operations Guide for BIND



4th Berkeley Distribution      November	21, 1987		   RESOLVER(3)
