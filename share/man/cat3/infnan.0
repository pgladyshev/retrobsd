INFNAN(3M)							    INFNAN(3M)



NNAAMMEE
       infnan -	signals	invalid	floating-point operations on a VAX (temporary)

SSYYNNOOPPSSIISS
       ##iinncclluuddee	<<mmaatthh..hh>>

       ddoouubbllee iinnffnnaann((iiaarrgg))
       iinntt iiaarrgg;;

DDEESSCCRRIIPPTTIIOONN
       At  some	 time  in  the	future,	 some  of the useful properties	of the
       Infinities and _N_a_Ns in the IEEE standard	754 for	Binary	Floating-Point
       Arithmetic  will	 be  simulated	in  UNIX  on  the DEC VAX by using its
       Reserved	Operands.  Meanwhile, the Invalid, Overflow and	Divide-by-Zero
       exceptions  of  the  IEEE  standard  are	being approximated on a	VAX by
       calls to	a procedure _i_n_f_n_a_n in appropriate places in _l_i_b_m.  When	better
       exception-handling  is implemented in UNIX, only	_i_n_f_n_a_n among the codes
       in _l_i_b_m will have to be changed.	 And users of _l_i_b_m  can	 design	 their
       own _i_n_f_n_a_n now to insulate themselves from future changes.

       Whenever	an elementary function code in _l_i_b_m has	to simulate one	of the
       aforementioned IEEE exceptions, it calls	infnan(iarg) with an appropri-
       ate  value  of  _i_a_r_g.  Then a reserved operand fault stops computation.
       But _i_n_f_n_a_n could	be replaced by a function  with	 the  same  name  that
       returns	some plausible value, assigns an apt value to the global vari-
       able _e_r_r_n_o, and	allows	computation  to	 resume.   Alternatively,  the
       Reserved	Operand	Fault Handler could be changed to respond by returning
       that plausible value, etc.  instead of aborting.

       In the table below, the first two columns show various exceptions  sig-
       naled  by the IEEE standard, and	the default result it prescribes.  The
       third column shows what value is	given to _i_a_r_g  by  functions  in  _l_i_b_m
       when  they  invoke infnan(iarg) under analogous circumstances on	a VAX.
       Currently _i_n_f_n_a_n	stops computation under	all those circumstances.   The
       last two	columns	offer an alternative; they suggest a setting for _e_r_r_n_o
       and a value for a revised _i_n_f_n_a_n	to return.  And	a C program to	imple-
       ment that suggestion follows.
	      IEEE	IEEE
	      Signal	Default	  _i_a_r_g	  _e_r_r_n_o		    _i_n_f_n_a_n
	      __________________________________________________
	      Invalid	_N_a_N	  EDOM	  EDOM		    0
	      Overflow	+-Infinity	  ERANGE	    ERANGEHUGE
	      Div-by-0	+-Infinity	  +-ERANGE	    ERANGE or EDOM+-HUGE
			(HUGE =	1.7e38 ... nearly  2.0**127)

       ALTERNATIVE  _i_n_f_n_a_n:
       ##iinncclluuddee	  <<mmaatthh..hh>>
       ##iinncclluuddee	  <<eerrrrnnoo..hh>>
       eexxtteerrnn iinntt eerrrrnnoo	;;
       ddoouubbllee	  iinnffnnaann((iiaarrgg))
       iinntt	  iiaarrgg ;;
       {{
		  sswwiittcchh((iiaarrgg)) {{
		  ccaassee	    EERRAANNGGEE:: eerrrrnnoo == EERRAANNGGEE;; rreettuurrnn((HHUUGGEE));;
		  ccaassee	   --EERRAANNGGEE:: eerrrrnnoo == EEDDOOMM;;   rreettuurrnn((--HHUUGGEE));;
		  ddeeffaauulltt::	    eerrrrnnoo == EEDDOOMM;;   rreettuurrnn((00));;
		  }}
       }}

SSEEEE AALLSSOO
       math(3M), intro(2), signal(3).

       ERANGE and EDOM are defined in <errno.h>.  See intro(2) for explanation
       of EDOM and ERANGE.



4.3 Berkeley Distribution	 May 27, 1986			    INFNAN(3M)
