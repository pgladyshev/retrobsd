SCANF(3S)							     SCANF(3S)



NNAAMMEE
       scanf, fscanf, sscanf - formatted input conversion

SSYYNNOOPPSSIISS
       ##iinncclluuddee	<<ssttddiioo..hh>>

       ssccaannff((ffoorrmmaatt [ ,	pointer	] . . .	 ))
       cchhaarr **ffoorrmmaatt;;

       ffssccaannff((ssttrreeaamm,, ffoorrmmaatt [ , pointer ] . . .  ))
       FFIILLEE **ssttrreeaamm;;
       cchhaarr **ffoorrmmaatt;;

       ssssccaannff((ss,, ffoorrmmaatt	[ , pointer ] .	. .  ))
       cchhaarr **ss,,	**ffoorrmmaatt;;

DDEESSCCRRIIPPTTIIOONN
       _S_c_a_n_f  reads  from  the standard	input stream ssttddiinn.  _F_s_c_a_n_f reads from
       the named input _s_t_r_e_a_m.	_S_s_c_a_n_f reads  from  the	 character  string  _s.
       Each  function reads characters,	interprets them	according to a format,
       and stores the results in its arguments.	 Each expects as  arguments  a
       control	string _f_o_r_m_a_t, described below,	and a set of _p_o_i_n_t_e_r arguments
       indicating where	the converted input should be stored.

       The control string usually contains  conversion	specifications,	 which
       are  used  to  direct  interpretation  of input sequences.  The control
       string may contain:

       1.  Blanks, tabs	or newlines, which match optional white	space  in  the
	   input.

       2.  An  ordinary	 character (not	%) which must match the	next character
	   of the input	stream.

       3.  Conversion  specifications,	consisting  of	the  character	%%,  an
	   optional  assignment	suppressing character **, an optional numerical
	   maximum field width,	and a conversion character.

       A conversion specification directs the conversion  of  the  next	 input
       field;  the  result  is placed in the variable pointed to by the	corre-
       sponding	argument, unless assignment suppression	was  indicated	by  **.
       An  input  field	 is  defined  as  a string of non-space	characters; it
       extends to the next inappropriate character or until the	 field	width,
       if specified, is	exhausted.

       The  conversion	character  indicates  the  interpretation of the input
       field;  the  corresponding  pointer  argument  must  usually  be	 of  a
       restricted type.	 The following conversion characters are legal:

       %%   a  single `%' is expected in	the input at this point; no assignment
	   is done.

       dd   a decimal integer is	expected; the corresponding argument should be
	   an integer pointer.

       oo   an  octal integer is	expected; the corresponding argument should be
	   a integer pointer.

       xx   a hexadecimal  integer  is  expected;  the  corresponding  argument
	   should be an	integer	pointer.

       ss   a  character	 string	is expected; the corresponding argument	should
	   be a	character pointer pointing to an  array	 of  characters	 large
	   enough  to  accept the string and a terminating `\0', which will be
	   added.  The input field is terminated by a  space  character	 or  a
	   newline.

       cc   a  character	 is  expected;	the corresponding argument should be a
	   character pointer.  The normal skip over space characters  is  sup-
	   pressed  in	this  case;  to	read the next non-space	character, try
	   `%1s'.  If a	field  width  is  given,  the  corresponding  argument
	   should  refer  to  a	 character  array, and the indicated number of
	   characters is read.

       ee   a floating point number is expected;	the next  field	 is  converted
       ff   accordingly	and  stored  through the corresponding argument, which
	   should be a pointer to a _f_l_o_a_t.   The  input	 format	 for  floating
	   point  numbers  is  an  optionally signed string of digits possibly
	   containing a	decimal	point, followed	by an optional exponent	 field
	   consisting of an E or e followed by an optionally signed integer.

       [[   indicates  a	 string	 not to	be delimited by	space characters.  The
	   left	bracket	is followed  by	 a  set	 of  characters	 and  a	 right
	   bracket;  the characters between the	brackets define	a set of char-
	   acters making up the	string.	 If the	first character	is not circum-
	   flex	(^), the input field is	all characters until the first charac-
	   ter not in the set between the brackets;  if	 the  first  character
	   after  the  left  bracket  is  ^, the input field is	all characters
	   until the first character which is in the remaining set of  charac-
	   ters	 between  the brackets.	 The corresponding argument must point
	   to a	character array.

       The conversion characters dd, oo and xx may	be capitalized or preceded  by
       ll to indicate that a pointer to lloonngg rather than	to iinntt is in the argu-
       ment list.  Similarly, the conversion characters	ee or ff may be capital-
       ized  or	 preceded  by ll	to indicate a pointer to ddoouubbllee	rather than to
       ffllooaatt.  The conversion characters dd, oo and xx may	be preceded  by	 hh  to
       indicate	a pointer to sshhoorrtt rather than to iinntt.

       The  _s_c_a_n_f  functions  return  the  number  of successfully matched and
       assigned	input items.  This can be used to decide how many input	 items
       were  found.  The constant EEOOFF is returned upon end of input; note that
       this is different from 0, which means that no conversion	was  done;  if
       conversion  was intended, it was	frustrated by an inappropriate charac-
       ter in the input.

       For example, the	call

		 int i;	float x; char name[50];
		 scanf("%d%f%s", &i, &x, name);

       with the	input line

	      25   54.32E-1  thompson

       will assign to _i	the value 25, _x	the value 5.432, and _n_a_m_e will contain
       _`_t_h_o_m_p_s_o_n_\_0_'.  Or,

	      int i; float x; char name[50];
	      scanf("%2d%f%*d%[1234567890]", &i, &x, name);

       with input

	      56789 0123 56a72

       will  assign  56	 to  _i,	 789.0 to _x, skip `0123', and place the	string
       `56\0' in _n_a_m_e.	The next call to _g_e_t_c_h_a_r will return `a'.

SSEEEE AALLSSOO
       atof(3),	getc(3S), printf(3S)

DDIIAAGGNNOOSSTTIICCSS
       The _s_c_a_n_f functions return EEOOFF on end of	input, and a short  count  for
       missing or illegal data items.

BBUUGGSS
       The  success  of	 literal  matches  and	suppressed  assignments	is not
       directly	determinable.



7th Edition			 May 15, 1985			     SCANF(3S)
