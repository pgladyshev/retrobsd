PRINTF(3S)							    PRINTF(3S)



NNAAMMEE
       printf, fprintf,	sprintf, vfprintf, vsprintf - formatted	output conver-
       sion

SSYYNNOOPPSSIISS
       ##iinncclluuddee	<<ssttddiioo..hh>>

       cchhaarr **pprriinnttff((ffoorrmmaatt [,, arg ] ...	 ))
       cchhaarr **ffoorrmmaatt;;

       cchhaarr **ffpprriinnttff((ssttrreeaamm,, ffoorrmmaatt [,, arg ] ...  ))
       FFIILLEE **ssttrreeaamm;;
       cchhaarr **ffoorrmmaatt;;

       iinntt sspprriinnttff((ss,, ffoorrmmaatt [,,	arg ] ...  ))
       cchhaarr **ss,,	**ffoorrmmaatt;;

       ##iinncclluuddee	<<vvaarraarrggss..hh>>
       cchhaarr **vvpprriinnttff((ffoorrmmaatt,, aarrggss))
       cchhaarr **ffoorrmmaatt;;
       vvaa__lliisstt aarrggss;;

       cchhaarr **vvffpprriinnttff((ssttrreeaamm,, ffoorrmmaatt,, aarrggss))
       FFIILLEE **ssttrreeaamm;;
       cchhaarr **ffoorrmmaatt;;
       vvaa__lliisstt aarrggss;;

       iinntt vvsspprriinnttff((ss,, ffoorrmmaatt,, aarrggss))
       cchhaarr **ss,,	**ffoorrmmaatt;;
       vvaa__lliisstt aarrggss;;

DDEESSCCRRIIPPTTIIOONN
       _P_r_i_n_t_f places output on the standard  output  stream  ssttddoouutt.   _F_p_r_i_n_t_f
       places  output  on the named output _s_t_r_e_a_m.  _S_p_r_i_n_t_f places `output' in
       the string _s, followed by the  character	 `\0'.	 Alternate  forms,  in
       which  the  arguments  have  already  been captured using the variable-
       length argument facilities of _v_a_r_a_r_g_s(3), are available under the names
       _v_p_r_i_n_t_f,	_v_f_p_r_i_n_t_f, and _v_s_p_r_i_n_t_f.

       Each  of	 these	functions  converts, formats, and prints its arguments
       after the first under control of	the first argument.  The  first	 argu-
       ment  is	 a character string which contains two types of	objects: plain
       characters, which are simply copied to the output stream,  and  conver-
       sion  specifications,  each  of which causes conversion and printing of
       the next	successive _a_r_g _p_r_i_n_t_f.

       Each conversion specification is	introduced by the  character  %%.   The
       remainder  of  the  conversion  specification includes in the following
       order

       ++oo      a	minus sign `-' which specifies _l_e_f_t  _a_d_j_u_s_t_m_e_n_t	 of  the  con-
	      verted value in the indicated field;

       ++oo      an  optional  digit string specifying a _f_i_e_l_d _w_i_d_t_h_; if the con-
	      verted value has fewer characters	than the field width  it  will
	      be  blank-padded	on  the	left (or right,	if the left-adjustment
	      indicator	has been given)	to make	up the	field  width;  if  the
	      field  width  begins  with  a  zero,  zero-padding  will be done
	      instead of blank-padding;

       ++oo      an optional period, followed by an optional digit	string	giving
	      a	_p_r_e_c_i_s_i_o_n which	specifies the number of	digits to appear after
	      the decimal point, for e-	and f-conversion, or the maximum  num-
	      ber of characters	to be printed from a string;

       ++oo      the character ll specifying that a	following dd, oo,	xx, or uu	corre-
	      sponds to	a long integer _a_r_g;

       ++oo      a	character  which  indicates  the  type	of  conversion	to  be
	      applied.

       A  field	 width	or precision may be `*'	instead	of a digit string.  In
       this case an integer _a_r_g	supplies the field width or precision.

       The conversion characters and their meanings are

       ddooxx    The integer _a_r_g is converted to signed decimal, unsigned	octal,
	      or unsigned hexadecimal notation respectively.

       ff      The  float or double _a_r_g is converted to decimal notation	in the
	      style `[--]ddd.ddd' where the number of  d's  after  the  decimal
	      point  is	equal to the precision specification for the argument.
	      If the precision is missing, 6 digits are	given; if  the	preci-
	      sion  is	explicitly  0,	no  digits  and	 no  decimal point are
	      printed.

       ee      The  float  or  double   _a_r_g   is	  converted   in   the	 style
	      `[--]d..dddee+-dd'  where  there  is	 one  digit before the decimal
	      point and	the number after is equal to the precision  specifica-
	      tion  for	 the argument; when the	precision is missing, 6	digits
	      are produced.

       gg      The float	or double _a_r_g is printed in style dd, in	style ff, or in
	      style ee, whichever gives full precision in minimum space.

       cc      The character _a_r_g	is printed.

       ss      _A_r_g  is  taken to	be a string (character pointer)	and characters
	      from the string are printed until	a null character or until  the
	      number of	characters indicated by	the precision specification is
	      reached; however if the precision	is 0 or	missing	all characters
	      up to a null are printed.

       uu      The  unsigned  integer  _a_r_g  is converted	to decimal and printed
	      (the result will be  in  the  range  0  through  MAXUINT,	 where
	      MAXUINT equals 4294967295	on a VAX-11 and	65535 on a PDP-11).

       %%      Print a `%'; no argument is converted.

       In no case does a non-existent or small field width cause truncation of
       a field;	padding	takes place only if the	specified field	width  exceeds
       the  actual  width.   Characters	 generated by _p_r_i_n_t_f are printed as by
       _p_u_t_c(3S).

RREETTUURRNN VVAALLUUEE
       The functions all return	the number of characters printed, or -1	if  an
       error occurred.

EEXXAAMMPPLLEESS
       To  print  a  date  and time in the form	`Sunday, July 3, 10:02', where
       _w_e_e_k_d_a_y and _m_o_n_t_h are pointers to null-terminated strings:

	      printf("%s, %s %d, %02d:%02d", weekday, month, day, hour,	min);

       To print	pi to 5	decimals:

	      printf("pi = %.5f", 4*atan(1.0));

SSEEEE AALLSSOO
       putc(3S), scanf(3S)

BBUUGGSS
       Very wide fields	(>300 characters) fail.

       Only _s_p_r_i_n_t_f and	_v_s_p_r_i_n_t_f return	a count	of characters transferred.

       The functions still supports _%_D,	_%_O, _%_U and _%_X.	Do not use these  for-
       mats, as	they will be disappearing real soon now.



7th Edition			August 10, 1988			    PRINTF(3S)
