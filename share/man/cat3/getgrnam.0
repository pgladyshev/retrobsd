GETGRENT(3)		   Library Functions Manual		   GETGRENT(3)



NNAAMMEE
       getgrent, getgrgid, getgrnam, setgrent, endgrent	- get group file entry

SSYYNNOOPPSSIISS
       ##iinncclluuddee	<<ggrrpp..hh>>

       ssttrruucctt ggrroouupp **ggeettggrreenntt(())

       ssttrruucctt ggrroouupp **ggeettggrrggiidd((ggiidd))
       iinntt ggiidd;;

       ssttrruucctt ggrroouupp **ggeettggrrnnaamm((nnaammee))
       cchhaarr **nnaammee;;

       sseettggrreenntt(())

       eennddggrreenntt(())

DDEESSCCRRIIPPTTIIOONN
       _G_e_t_g_r_e_n_t_,  _g_e_t_g_r_g_i_d and _g_e_t_g_r_n_a_m	each return pointers to	an object with
       the following structure containing the broken-out fields	of a  line  in
       the group file.

	      /* Copyright (C) 1991-2018 Free Software Foundation, Inc.
		 This file is part of the GNU C	Library.

		 The GNU C Library is free software; you can redistribute it and/or
		 modify	it under the terms of the GNU Lesser General Public
		 License as published by the Free Software Foundation; either
		 version 2.1 of	the License, or	(at your option) any later version.

		 The GNU C Library is distributed in the hope that it will be useful,
		 but WITHOUT ANY WARRANTY; without even	the implied warranty of
		 MERCHANTABILITY or FITNESS FOR	A PARTICULAR PURPOSE.  See the GNU
		 Lesser	General	Public License for more	details.

		 You should have received a copy of the	GNU Lesser General Public
		 License along with the	GNU C Library; if not, see
		 <http://www.gnu.org/licenses/>.  */

	      /*
	       *   POSIX Standard: 9.2.1 Group Database	Access	<grp.h>
	       */

	      #ifndef	_GRP_H
	      #define	_GRP_H	  1

	      #include <features.h>

	      __BEGIN_DECLS

	      #include <bits/types.h>

	      #define __need_size_t
	      #include <stddef.h>


	      /* For the Single	Unix specification we must define this type here.  */
	      #if (defined __USE_XOPEN || defined __USE_XOPEN2K) && !defined __gid_t_defined
	      typedef __gid_t gid_t;
	      #	define __gid_t_defined
	      #endif

	      /* The group structure.	*/
	      struct group
		{
		  char *gr_name;       /* Group	name. */
		  char *gr_passwd;	    /* Password.   */
		  __gid_t gr_gid;      /* Group	ID.   */
		  char **gr_mem;       /* Member list.	   */
		};


	      #ifdef __USE_MISC
	      #	include	<bits/types/FILE.h>
	      #endif


	      #if defined __USE_MISC ||	defined	__USE_XOPEN_EXTENDED
	      /* Rewind	the group-file stream.

		 This function is a possible cancellation point	and therefore not
		 marked	with __THROW.  */
	      extern void setgrent (void);

	      /* Close the group-file stream.

		 This function is a possible cancellation point	and therefore not
		 marked	with __THROW.  */
	      extern void endgrent (void);

	      /* Read an entry from the	group-file stream, opening it if necessary.

		 This function is a possible cancellation point	and therefore not
		 marked	with __THROW.  */
	      extern struct group *getgrent (void);
	      #endif

	      #ifdef	__USE_MISC
	      /* Read a	group entry from STREAM.

		 This function is not part of POSIX and	therefore no official
		 cancellation point.  But due to similarity with an POSIX interface
		 or due	to the implementation it is a cancellation point and
		 therefore not marked with __THROW.  */
	      extern struct group *fgetgrent (FILE *__stream);
	      #endif

	      #ifdef __USE_GNU
	      /* Write the given entry onto the	given stream.

		 This function is not part of POSIX and	therefore no official
		 cancellation point.  But due to similarity with an POSIX interface
		 or due	to the implementation it is a cancellation point and
		 therefore not marked with __THROW.  */
	      extern int putgrent (const struct	group *__restrict __p,
			     FILE *__restrict __f);
	      #endif

	      /* Search	for an entry with a matching group ID.

		 This function is a possible cancellation point	and therefore not
		 marked	with __THROW.  */
	      extern struct group *getgrgid (__gid_t __gid);

	      /* Search	for an entry with a matching group name.

		 This function is a possible cancellation point	and therefore not
		 marked	with __THROW.  */
	      extern struct group *getgrnam (const char	*__name);

	      #ifdef __USE_POSIX

	      #	ifdef __USE_MISC
	      /* Reasonable value for the buffer sized used in the reentrant
		 functions below.  But better use `sysconf'.  */
	      #	 define	NSS_BUFLEN_GROUP    1024
	      #	endif

	      /* Reentrant versions of some of the functions above.

		 PLEASE	NOTE: the `getgrent_r' function	is not (yet) standardized.
		 The interface may change in later versions of this library.  But
		 the interface is designed following the principals used for the
		 other reentrant functions so the chances are good this	is what	the
		 POSIX people would choose.

		 This function is not part of POSIX and	therefore no official
		 cancellation point.  But due to similarity with an POSIX interface
		 or due	to the implementation it is a cancellation point and
		 therefore not marked with __THROW.  */

	      #	ifdef __USE_GNU
	      extern int getgrent_r (struct group *__restrict __resultbuf,
			       char *__restrict	__buffer, size_t __buflen,
			       struct group **__restrict __result);
	      #	endif

	      /* Search	for an entry with a matching group ID.

		 This function is a possible cancellation point	and therefore not
		 marked	with __THROW.  */
	      extern int getgrgid_r (__gid_t __gid, struct group *__restrict __resultbuf,
			       char *__restrict	__buffer, size_t __buflen,
			       struct group **__restrict __result);

	      /* Search	for an entry with a matching group name.

		 This function is a possible cancellation point	and therefore not
		 marked	with __THROW.  */
	      extern int getgrnam_r (const char	*__restrict __name,
			       struct group *__restrict	__resultbuf,
			       char *__restrict	__buffer, size_t __buflen,
			       struct group **__restrict __result);

	      #	ifdef	__USE_MISC
	      /* Read a	group entry from STREAM.  This function	is not standardized
		 an probably never will.

		 This function is not part of POSIX and	therefore no official
		 cancellation point.  But due to similarity with an POSIX interface
		 or due	to the implementation it is a cancellation point and
		 therefore not marked with __THROW.  */
	      extern int fgetgrent_r (FILE *__restrict __stream,
			     struct group *__restrict __resultbuf,
			     char *__restrict __buffer,	size_t __buflen,
			     struct group **__restrict __result);
	      #	endif

	      #endif	/* POSIX or reentrant */


	      #ifdef	__USE_MISC

	      #	define __need_size_t
	      #	include	<stddef.h>

	      /* Set the group set for the current user	to GROUPS (N of	them).	*/
	      extern int setgroups (size_t __n,	const __gid_t *__groups) __THROW;

	      /* Store at most *NGROUPS	members	of the group set for USER into
		 *GROUPS.  Also	include	GROUP.	The actual number of groups found is
		 returned in *NGROUPS.	Return -1 if the if *NGROUPS is	too small.

		 This function is not part of POSIX and	therefore no official
		 cancellation point.  But due to similarity with an POSIX interface
		 or due	to the implementation it is a cancellation point and
		 therefore not marked with __THROW.  */
	      extern int getgrouplist (const char *__user, __gid_t __group,
			      __gid_t *__groups, int *__ngroups);

	      /* Initialize the	group set for the current user
		 by reading the	group database and using all groups
		 of which USER is a member.  Also include GROUP.

		 This function is not part of POSIX and	therefore no official
		 cancellation point.  But due to similarity with an POSIX interface
		 or due	to the implementation it is a cancellation point and
		 therefore not marked with __THROW.  */
	      extern int initgroups (const char	*__user, __gid_t __group);

	      #endif /*	Use misc.  */

	      __END_DECLS

	      #endif /*	grp.h  */

       The members of this structure are:

       gr_name	  The name of the group.
       gr_passwd  The encrypted	password of the	group.
       gr_gid	  The numerical	group-ID.
       gr_mem	  Null-terminated  vector of pointers to the individual	member
		  names.

       _G_e_t_g_r_e_n_t	simply reads the next line while _g_e_t_g_r_g_i_d and _g_e_t_g_r_n_a_m	search
       until  a	 matching  _g_i_d or _n_a_m_e is found	(or until EOF is encountered).
       Each routine picks up where the others leave off	 so  successive	 calls
       may be used to search the entire	file.

       A  call to _s_e_t_g_r_e_n_t has the effect of rewinding the group file to allow
       repeated	searches.  _E_n_d_g_r_e_n_t may	be called to close the group file when
       processing is complete.

FFIILLEESS
       /etc/group

SSEEEE AALLSSOO
       getlogin(3), getpwent(3), group(5)

DDIIAAGGNNOOSSTTIICCSS
       A null pointer (0) is returned on EOF or	error.

BBUUGGSS
       All  information	 is contained in a static area so it must be copied if
       it is to	be saved.



7th Edition			 May 15, 1985			   GETGRENT(3)
