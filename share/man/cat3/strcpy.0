STRING(3)		   Library Functions Manual		     STRING(3)



NNAAMMEE
       strcat,	strncat,  strcmp,  strncmp,  strcasecmp,  strncasecmp, strcpy,
       strncpy,	strlen,	index, rindex -	string operations

SSYYNNOOPPSSIISS
       ##iinncclluuddee	<<ssttrriinnggss..hh>>

       cchhaarr **ssttrrccaatt((ss,, aappppeenndd))
       cchhaarr **ss,,	**aappppeenndd;;

       cchhaarr **ssttrrnnccaatt((ss,,	aappppeenndd,,	ccoouunntt))
       cchhaarr **ss,,	**aappppeenndd;;
       iinntt ccoouunntt;;

       ssttrrccmmpp((ss11,, ss22))
       cchhaarr **ss11,, **ss22;;

       ssttrrnnccmmpp((ss11,, ss22,, ccoouunntt))
       cchhaarr **ss11,, **ss22;;
       iinntt ccoouunntt;;

       ssttrrccaasseeccmmpp((ss11,, ss22))
       cchhaarr **ss11,, **ss22;;

       ssttrrnnccaasseeccmmpp((ss11,, ss22,, ccoouunntt))
       cchhaarr **ss11,, **ss22;;
       iinntt ccoouunntt;;

       cchhaarr **ssttrrccppyy((ttoo,,	ffrroomm))
       cchhaarr **ttoo,, **ffrroomm;;

       cchhaarr **ssttrrnnccppyy((ttoo,, ffrroomm,, ccoouunntt))
       cchhaarr **ttoo,, **ffrroomm;;
       iinntt ccoouunntt;;

       ssttrrlleenn((ss))
       cchhaarr **ss;;

       cchhaarr **iinnddeexx((ss,, cc))
       cchhaarr **ss,,	cc;;

       cchhaarr **rriinnddeexx((ss,, cc))
       cchhaarr **ss,,	cc;;

DDEESSCCRRIIPPTTIIOONN
       These functions operate on null-terminated strings.  They do not	 check
       for overflow of any receiving string.

       _S_t_r_c_a_t  appends a copy of string	_a_p_p_e_n_d to the end of string _s. _S_t_r_n_c_a_t
       copies at most _c_o_u_n_t characters.	 Both return a pointer	to  the	 null-
       terminated result.

       _S_t_r_c_m_p  compares	 its  arguments	 and  returns an integer greater than,
       equal to, or less than 0, according as _s_1 is lexicographically  greater
       than, equal to, or less than _s_2.	 _S_t_r_n_c_m_p makes the same	comparison but
       looks at	at most	_c_o_u_n_t  characters.   _S_t_r_c_a_s_e_c_m_p	 and  _s_t_r_n_c_a_s_e_c_m_p  are
       identical  in function, but are case insensitive.  The returned lexico-
       graphic difference reflects a conversion	to lower-case.

       _S_t_r_c_p_y copies string _f_r_o_m to _t_o,	stopping after the null	character  has
       been  moved.   _S_t_r_n_c_p_y copies exactly _c_o_u_n_t characters, appending nulls
       if _f_r_o_m is less than _c_o_u_n_t characters in	length;	the target may not  be
       null-terminated	if  the	 length	of _f_r_o_m	is _c_o_u_n_t or more.  Both	return
       _t_o.

       _S_t_r_l_e_n returns the number of non-null characters	in _s.

       _I_n_d_e_x (_r_i_n_d_e_x) returns a	pointer	to  the	 first	(last)	occurrence  of
       character  _c  in	 string	 _s  or zero if _c does not occur	in the string.
       Setting _c to NULL works.



4th Berkeley Distribution      October 22, 1987			     STRING(3)
