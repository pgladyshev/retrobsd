RANDOM(3)		   Library Functions Manual		     RANDOM(3)



NNAAMMEE
       random,	srandom, initstate, setstate - better random number generator;
       routines	for changing generators

SSYYNNOOPPSSIISS
       lloonngg rraannddoomm(())

       ssrraannddoomm((sseeeedd))
       iinntt sseeeedd;;

       cchhaarr **iinniittssttaattee((sseeeedd,, ssttaattee,, nn))
       uunnssiiggnneedd	sseeeedd;;
       cchhaarr **ssttaattee;;
       iinntt nn;;

       cchhaarr **sseettssttaattee((ssttaattee))
       cchhaarr **ssttaattee;;

DDEESSCCRRIIPPTTIIOONN
       _R_a_n_d_o_m uses a non-linear	 additive  feedback  random  number  generator
       employing a default table of size 31 long integers to return successive
       pseudo-random numbers in	the range from 0 to (2**31)-1.	The period  of
       this   random   number	generator   is	 very	large,	 approximately
       16*((2**31)-1).

       _R_a_n_d_o_m_/_s_r_a_n_d_o_m have (almost) the	same calling sequence and  initializa-
       tion properties as _r_a_n_d_/_s_r_a_n_d_.  The difference is that _r_a_n_d(3) produces
       a much less random sequence -- in fact, the low dozen bits generated by
       rand go through a cyclic	pattern.  All the bits generated by _r_a_n_d_o_m are
       usable.	For example, ``random()&01''  will  produce  a	random	binary
       value.

       Unlike _s_r_a_n_d, _s_r_a_n_d_o_m does not return the old seed; the reason for this
       is that the amount of state information used is much more than a	single
       word.   (Two other routines are provided	to deal	with restarting/chang-
       ing random number generators).  Like _r_a_n_d(3), however, _r_a_n_d_o_m  will  by
       default produce a sequence of numbers that can be duplicated by calling
       _s_r_a_n_d_o_m with _1 as the seed.

       The _i_n_i_t_s_t_a_t_e routine allows a state array, passed in as	 an  argument,
       to  be  initialized  for	 future	 use.  The size	of the state array (in
       bytes) is used by _i_n_i_t_s_t_a_t_e to decide how sophisticated a random	number
       generator  it  should use -- the	more state, the	better the random num-
       bers will be.  (Current "optimal" values	for the	amount of state	infor-
       mation are 8, 32, 64, 128, and 256 bytes; other amounts will be rounded
       down to the nearest known amount.  Using	less than 8 bytes  will	 cause
       an error).  The seed for	the initialization (which specifies a starting
       point for the random number sequence, and provides  for	restarting  at
       the  same  point)  is also an argument.	_I_n_i_t_s_t_a_t_e returns a pointer to
       the previous state information array.

       Once a state has	been initialized, the _s_e_t_s_t_a_t_e	routine	 provides  for
       rapid switching between states.	_S_e_t_s_t_a_t_e returns a pointer to the pre-
       vious state array; its argument state array is used for further	random
       number generation until the next	call to	_i_n_i_t_s_t_a_t_e or _s_e_t_s_t_a_t_e_.

       Once  a state array has been initialized, it may	be restarted at	a dif-
       ferent point either by calling _i_n_i_t_s_t_a_t_e	(with the  desired  seed,  the
       state  array, and its size) or by calling both _s_e_t_s_t_a_t_e (with the state
       array) and _s_r_a_n_d_o_m (with	the desired seed).  The	advantage  of  calling
       both  _s_e_t_s_t_a_t_e and _s_r_a_n_d_o_m is that the size of the state	array does not
       have to be remembered after it is initialized.

       With 256	bytes of state information, the	period of  the	random	number
       generator  is  greater  than  2**69 which should	be sufficient for most
       purposes.

AAUUTTHHOORR
       Earl T. Cohen

DDIIAAGGNNOOSSTTIICCSS
       If _i_n_i_t_s_t_a_t_e is called with less	than 8 bytes of	state information,  or
       if  _s_e_t_s_t_a_t_e detects that the state information has been	garbled, error
       messages	are printed on the standard error output.

SSEEEE AALLSSOO
       rand(3)

BBUUGGSS
       About 2/3 the speed of _r_a_n_d(3C).



4.2 Berkeley Distribution     September	29, 1985		     RANDOM(3)
