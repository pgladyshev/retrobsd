SH(1)			    General Commands Manual			 SH(1)



NNAAMMEE
       sh,  for, case, if, while, ::, ..,	break, continue, cd, eval, exec, exit,
       export, login, read, readonly, set, shift, times, trap, umask,  wait  -
       command language

SSYYNNOOPPSSIISS
       sshh [ --cceeiikknnrrssttuuvvxx ] [ arg ] ...

DDEESSCCRRIIPPTTIIOONN
       _S_h is a command programming language that executes commands read	from a
       terminal	or a file.  See	iinnvvooccaattiioonn for the meaning of arguments	to the
       shell.

       CCoommmmaannddss..
       A  _s_i_m_p_l_e_-_c_o_m_m_a_n_d  is a sequence	of non blank _w_o_r_d_s separated by	blanks
       (a blank	is a ttaabb or a ssppaaccee).  The first word specifies	 the  name  of
       the  command  to	 be executed.  Except as specified below the remaining
       words are passed	as arguments to	the invoked command.  The command name
       is passed as argument 0 (see _e_x_e_c_v_e(2)).	 The _v_a_l_u_e of a	simple-command
       is its exit status if it	terminates normally or 200+_s_t_a_t_u_s if it	termi-
       nates abnormally	(see _s_i_g_v_e_c(2) for a list of status values).

       A  _p_i_p_e_l_i_n_e  is a sequence of one or more _c_o_m_m_a_n_d_s separated by ||..  The
       standard	output of each command but the last is connected by a  _p_i_p_e(2)
       to  the	standard  input	of the next command.  Each command is run as a
       separate	process; the shell waits for the last command to terminate.

       A _l_i_s_t is a sequence of one or more _p_i_p_e_l_i_n_e_s separated by ;;, &&,	&&&&  or
       ||||  and optionally terminated by	;; or &&.	 ;; and && have equal precedence
       which is	lower than that	of &&&& and ||||, &&&& and ||||	also have equal	prece-
       dence.	A  semicolon  causes sequential	execution; an ampersand	causes
       the preceding _p_i_p_e_l_i_n_e to be executed without waiting for it to finish.
       The symbol &&&& (||||) causes the _l_i_s_t following to be executed only	if the
       preceding _p_i_p_e_l_i_n_e returns a  zero  (non	 zero)	value.	 Newlines  may
       appear in a _l_i_s_t_, instead of semicolons,	to delimit commands.

       A  _c_o_m_m_a_n_d  is  either  a  simple-command or one	of the following.  The
       value returned by a command is that of the last simple-command executed
       in the command.

       ffoorr _n_a_m_e	[iinn _w_o_r_d ...] ddoo _l_i_s_t ddoonnee
	      Each time	a ffoorr command is executed _n_a_m_e is set to the next word
	      in the ffoorr word list.  If	iinn _w_o_r_d	...  is	omitted,  iinn  ""$$@@""  is
	      assumed.	 Execution  ends  when	there are no more words	in the
	      list.

       ccaassee _w_o_r_d iinn [_p_a_t_t_e_r_n [ || _p_a_t_t_e_r_n ] ... )) _l_i_s_t ;;;;] ... eessaacc
	      A	ccaassee command executes the _l_i_s_t associated with the first  pat-
	      tern that	matches	_w_o_r_d_.  The form	of the patterns	is the same as
	      that used	for file name generation.

       iiff _l_i_s_t tthheenn _l_i_s_t [eelliiff _l_i_s_t tthheenn _l_i_s_t] ... [eellssee _l_i_s_t] ffii
	      The _l_i_s_t following iiff is executed	and if	it  returns  zero  the
	      _l_i_s_t  following tthheenn is executed.	 Otherwise, the	_l_i_s_t following
	      eelliiff is executed and if its value	is  zero  the  _l_i_s_t  following
	      tthheenn is executed.	 Failing that the eellssee _l_i_s_t is executed.

       wwhhiillee _l_i_s_t [ddoo _l_i_s_t] ddoonnee
	      A	 wwhhiillee	command	 repeatedly executes the wwhhiillee _l_i_s_t and	if its
	      value is zero executes the ddoo _l_i_s_t_; otherwise  the  loop	termi-
	      nates.   The  value  returned  by	a wwhhiillee	command	is that	of the
	      last executed command in the ddoo _l_i_s_t_.   uunnttiill  may  be  used  in
	      place of wwhhiillee to	negate the loop	termination test.

       (( _l_i_s_t ))
	      Execute _l_i_s_t in a	subshell.

       {{ _l_i_s_t }}
	      _l_i_s_t is simply executed.

       The  following words are	only recognized	as the first word of a command
       and when	not quoted.

	      iiff tthheenn eellssee eelliiff	ffii ccaassee	iinn eessaacc	ffoorr wwhhiillee uunnttiill	ddoo ddoonnee	{{ }}

       CCoommmmaanndd ssuubbssttiittuuttiioonn..
       The standard output from	a command enclosed in a	pair  of  back	quotes
       (````)  may  be  used  as	part  or  all of a word; trailing newlines are
       removed.

       PPaarraammeetteerr ssuubbssttiittuuttiioonn..
       The character $$ is used to introduce substitutable  parameters.	 Posi-
       tional  parameters may be assigned values by sseett.  Variables may	be set
       by writing

	      _n_a_m_e==_v_a_l_u_e [ _n_a_m_e==_v_a_l_u_e ]	...

       ${{_p_a_r_a_m_e_t_e_r}}
	      A	_p_a_r_a_m_e_t_e_r is a sequence	of letters, digits or  underscores  (a
	      _n_a_m_e),  a	 digit,	 or  any of the	characters ** @@ ## ?? -- $$ !!..  The
	      value, if	any, of	the parameter is substituted.  The braces  are
	      required	only when _p_a_r_a_m_e_t_e_r is followed	by a letter, digit, or
	      underscore that is not to	be interpreted as part	of  its	 name.
	      If  _p_a_r_a_m_e_t_e_r  is	 a  digit,  it	is a positional	parameter.  If
	      _p_a_r_a_m_e_t_e_r	is ** or	@@ then all the positional parameters, starting
	      with  $$11,	 are  substituted separated by spaces.	$$00 is set from
	      argument zero when the shell is invoked.

       ${{_p_a_r_a_m_e_t_e_r_-_w_o_r_d}}
	      If _p_a_r_a_m_e_t_e_r is set, substitute its value; otherwise  substitute
	      _w_o_r_d_.

       ${{_p_a_r_a_m_e_t_e_r_=_w_o_r_d}}
	      If _p_a_r_a_m_e_t_e_r is not set, set it to _w_o_r_d_; the value of the	param-
	      eter is then substituted.	  Positional  parameters  may  not  be
	      assigned to in this way.

       ${{_p_a_r_a_m_e_t_e_r_?_w_o_r_d}}
	      If _p_a_r_a_m_e_t_e_r is set, substitute its value; otherwise, print _w_o_r_d
	      and exit from the	shell.	If _w_o_r_d	is omitted, a standard message
	      is printed.

       ${{_p_a_r_a_m_e_t_e_r_+_w_o_r_d}}
	      If _p_a_r_a_m_e_t_e_r is set, substitute _w_o_r_d_; otherwise substitute noth-
	      ing.

       In the above _w_o_r_d is not	evaluated unless it is to be used as the  sub-
       stituted	string.	 (So that, for example,	echo ${d-'pwd'}	will only exe-
       cute _p_w_d	if _d is	unset.)

       The following _p_a_r_a_m_e_t_e_r_s	are automatically set by the shell.

	      ##	     The number	of positional parameters in decimal.
	      --	     Options supplied to the shell on invocation or by sseett.
	      ??	     The value returned	by the last executed command in	 deci-
		     mal.
	      $$	     The process number	of this	shell.
	      !!	     The   process  number  of	the  last  background  command
		     invoked.

       The following _p_a_r_a_m_e_t_e_r_s	are used but not set by	the shell.

	      HHOOMMEE   The default argument (home	directory) for the ccdd command.
	      PPAATTHH   The search	path for commands (see eexxeeccuuttiioonn).
	      MMAAIILL   If	this variable is set to	the name of a mail  file,  the
		     shell  informs  the  user	of  the	arrival	of mail	in the
		     specified file.
	      PPSS11    Primary prompt string, by default '$ '.
	      PPSS22    Secondary prompt string, by default '> '.
	      IIFFSS    Internal field separators,	normally ssppaaccee,	ttaabb, and  nneeww--
		     lliinnee.   IIFFSS is ignored if _s_h is running as	root or	if the
		     effective user id differs from the	real user id.

       BBllaannkk iinntteerrpprreettaattiioonn..
       After parameter and command substitution, any results  of  substitution
       are  scanned  for  internal  field separator characters (those found in
       $$IIFFSS) and split into  distinct  arguments  where	 such  characters  are
       found.  Explicit	null arguments ("" or '') are retained.	 Implicit null
       arguments (those	resulting from _p_a_r_a_m_e_t_e_r_s that	have  no  values)  are
       removed.

       FFiillee nnaammee ggeenneerraattiioonn..
       Following substitution, each command word is scanned for	the characters
       **, ??  and [[..  If	one of these characters	appears, the word is  regarded
       as  a  pattern.	 The  word is replaced with alphabetically sorted file
       names that match	the pattern.  If no file name is  found	 that  matches
       the pattern, the	word is	left unchanged.	 The character ..  at the start
       of a file name or immediately following a //, and	the character //,  must
       be matched explicitly.

       **      Matches any string, including the	null string.
       ??      Matches any single character.
       [[......]]  Matches  any  one	of the characters enclosed.  A pair of charac-
	      ters separated by	-- matches any character	lexically between  the
	      pair.

       QQuuoottiinngg..
       The  following characters have a	special	meaning	to the shell and cause
       termination of a	word unless quoted.

	    ;;	&&   ((	))   ||	<<   >>	nneewwlliinnee	  ssppaaccee	  ttaabb

       A character may be _q_u_o_t_e_d by  preceding	it  with  a  \\..	  \\nneewwlliinnee  is
       ignored.	  All  characters enclosed between a pair of quote marks (''''),
       except a	single quote, are quoted.  Inside double quotes	("""") parameter
       and  command  substitution occurs and \\ quotes the characters \\ '' "" and
       $$.

       ""$$**"" is equivalent to ""$$11 $$22 ......""  whereas
       ""$$@@"" is equivalent to ""$$11"" ""$$22"" ...... ..

       PPrroommppttiinngg..
       When used interactively,	the shell prompts with the value of PS1	before
       reading a command.  If at any time a newline is typed and further input
       is needed to complete a command,	the secondary prompt ($$PPSS22) is issued.

       IInnppuutt oouuttppuutt..
       Before a	command	is executed its	input and  output  may	be  redirected
       using  a	 special notation interpreted by the shell.  The following may
       appear anywhere in a simple-command or may precede or follow a  _c_o_m_m_a_n_d
       and  are	 not  passed  on  to the invoked command.  Substitution	occurs
       before _w_o_r_d or _d_i_g_i_t is used.

       <_w_o_r_d  Use file _w_o_r_d as standard	input (file descriptor 0).

       >_w_o_r_d  Use file _w_o_r_d as standard	output (file descriptor	 1).   If  the
	      file does	not exist, it is created; otherwise it is truncated to
	      zero length.

       >>_w_o_r_d Use file _w_o_r_d as standard	output.	 If the	file exists, output is
	      appended (by seeking to the end);	otherwise the file is created.

       <<_w_o_r_d The shell	input is read up to a line the same as _w_o_r_d, or	end of
	      file.  The resulting document becomes the	 standard  input.   If
	      any  character  of  _w_o_r_d	is quoted, no interpretation is	placed
	      upon the characters of the document;  otherwise,	parameter  and
	      command  substitution occurs, \\nneewwlliinnee is	ignored, and \\ is used
	      to quote the characters \\	$$ '' and	the first character of _w_o_r_d_.

       <&_d_i_g_i_t
	      The standard input is duplicated from file descriptor _d_i_g_i_t_; see
	      _d_u_p(2).  Similarly for the standard output using >.

       <&-    The standard input is closed.  Similarly for the standard	output
	      using >.

       If one of the above is preceded by a digit, the file descriptor created
       is  that	 specified  by the digit (instead of the default 0 or 1).  For
       example,

	    ...	2>&1

       creates file descriptor 2 to be a duplicate of file descriptor 1.

       If a command is followed	by && then the default standard input  for  the
       command	is the empty file (/dev/null).	Otherwise, the environment for
       the execution of	a command contains the file descriptors	of the	invok-
       ing shell as modified by	input output specifications.

       EEnnvviirroonnmmeenntt..
       The environment is a list of name-value pairs that is passed to an exe-
       cuted program in	the same way as	a normal argument list;	see  _e_x_e_c_v_e(2)
       and  _e_n_v_i_r_o_n(7).	  The  shell interacts with the	environment in several
       ways.  On invocation, the shell scans the  environment  and  creates  a
       _p_a_r_a_m_e_t_e_r for each name found, giving it	the corresponding value.  Exe-
       cuted commands inherit the same environment.  If	the user modifies  the
       values  of  these _p_a_r_a_m_e_t_e_r_s or creates new ones, none of these affects
       the environment unless the eexxppoorrtt command is used to bind  the  shell's
       _p_a_r_a_m_e_t_e_r  to  the  environment.	  The environment seen by any executed
       command is thus composed	of any unmodified name-value pairs  originally
       inherited  by  the  shell,  plus	any modifications or additions,	all of
       which must be noted in eexxppoorrtt commands.

       The environment for any _s_i_m_p_l_e_-_c_o_m_m_a_n_d may be augmented by prefixing it
       with  one  or more assignments to _p_a_r_a_m_e_t_e_r_s_.  Thus these two lines are
       equivalent

	      TERM=450 cmd args
	      (export TERM; TERM=450; cmd args)

       If the --kk flag is set, _a_l_l keyword arguments are	placed in the environ-
       ment,  even  if the occur after the command name.  The following	prints
       'a=b c' and 'c':
       echo a=b	c
       set -k
       echo a=b	c

       SSiiggnnaallss..
       The INTERRUPT and QUIT signals for an invoked command  are  ignored  if
       the  command is followed	by &&; otherwise	signals	have the values	inher-
       ited by the shell from its parent.  (But	see also ttrraapp..)

       EExxeeccuuttiioonn..
       Each time a command is executed the  above  substitutions  are  carried
       out.   Except  for the 'special commands' listed	below a	new process is
       created and an attempt is made to execute the command via an _e_x_e_c_v_e(2).

       The shell parameter $$PPAATTHH defines the search  path  for	the  directory
       containing  the	command.  Each alternative directory name is separated
       by a colon (::).	The default path is :://bbiinn:://uussrr//bbiinn.   If  the  command
       name contains a /, the search path is not used.	Otherwise, each	direc-
       tory in the path	is searched for	an executable file.  If	the  file  has
       execute permission but is not an	_a_._o_u_t file, it is assumed to be	a file
       containing shell	commands.  A subshell (i.e., a	separate  process)  is
       spawned to read it.  A parenthesized command is also executed in	a sub-
       shell.

       SSppeecciiaall ccoommmmaannddss..
       The following commands are executed in the  shell  process  and	except
       where  specified	no input output	redirection is permitted for such com-
       mands.

       ##      For  non-interactive  shells,  everything	 following  the	 ##  is
	      treated as a comment, i.e. the rest of the line is ignored.  For
	      interactive shells, the ##	has no special effect.

       ::      No effect; the command does nothing.
       .. _f_i_l_e Read and execute commands	from _f_i_l_e and return.  The search path
	      $$PPAATTHH is used to find the	directory containing _f_i_l_e.
       bbrreeaakk [_n]
	      Exit  from  the  enclosing  ffoorr  or wwhhiillee	loop, if any.  If _n is
	      specified, break _n levels.
       ccoonnttiinnuuee	[_n]
	      Resume the next iteration	of the enclosing ffoorr  or  wwhhiillee	 loop.
	      If _n is specified, resume	at the _n-th enclosing loop.
       ccdd [_a_r_g]
	      Change  the current directory to _a_r_g_.  The shell parameter $$HHOOMMEE
	      is the default _a_r_g.
       eevvaall [_a_r_g ...]
	      The arguments are	read as	input to the shell and	the  resulting
	      command(s) executed.
       eexxeecc [_a_r_g ...]
	      The  command  specified by the arguments is executed in place of
	      this shell without creating a new	process.  Input	 output	 argu-
	      ments  may  appear and if	no other arguments are given cause the
	      shell input output to be modified.
       eexxiitt [_n]
	      Causes a non interactive shell to	 exit  with  the  exit	status
	      specified	by _n_.  If _n is omitted,	the exit status	is that	of the
	      last command executed.  (An end of file will also	exit from  the
	      shell.)
       eexxppoorrtt [_n_a_m_e ...]
	      The  given names are marked for automatic	export to the _e_n_v_i_r_o_n_-
	      _m_e_n_t of subsequently-executed commands.	If  no	arguments  are
	      given, a list of exportable names	is printed.
       llooggiinn [_a_r_g ...]
	      Equivalent to 'exec login	arg ...'.
       rreeaadd _n_a_m_e _._._.
	      One  line	 is  read from the standard input; successive words of
	      the input	are assigned to	the  variables	_n_a_m_e  in  order,  with
	      leftover	words  to  the	last  variable.	  The return code is 0
	      unless the end-of-file is	encountered.
       rreeaaddoonnllyy	[_n_a_m_e ...]
	      The given	names are marked readonly and the values of the	 these
	      names  may not be	changed	by subsequent assignment.  If no argu-
	      ments are	given, a list of all readonly names is printed.
       sseett [--eekknnppttuuvvxx [_a_r_g ...]]
	      --ee If non	interactive, exit immediately if a command fails.
	      --kk All keyword arguments are placed in  the  environment	for  a
		 command, not just those that precede the command name.
	      --nn Read commands but do not execute them.
	      --tt Exit after reading and	executing one command.
	      --uu Treat unset variables as an error when	substituting.
	      --vv Print shell input lines as they are read.
	      --xx Print commands	and their arguments as they are	executed.
	      --	 Turn off the --xx and --vv	options.

	      These  flags can also be used upon invocation of the shell.  The
	      current set of flags may be found	in $$--.

	      Remaining	arguments are positional parameters and	are  assigned,
	      in order,	to $$11, $$22, etc.	 If no arguments are given, the	values
	      of all names are printed.

       sshhiifftt  The positional parameters	from $$22...  are	renamed	$$11...

       ttiimmeess  Print the	accumulated user and system times  for	processes  run
	      from the shell.

       ttrraapp [_a_r_g] [_n] ...
	      _A_r_g is a command to be read and executed when the	shell receives
	      signal(s)	_n_.  (Note that _a_r_g is scanned once when	 the  trap  is
	      set  and	once  when the trap is taken.)	Trap commands are exe-
	      cuted in order of	signal number.	If _a_r_g is absent, all  trap(s)
	      _n	 are  reset  to	 their	original  values.   If _a_r_g is the null
	      string, this signal is ignored by	the shell and by invoked  com-
	      mands.   If _n is 0, the command _a_r_g is executed on exit from the
	      shell, otherwise	upon  receipt  of  signal  _n  as  numbered  in
	      _s_i_g_v_e_c(2).   _T_r_a_p	 with  no  arguments prints a list of commands
	      associated with each signal number.

       uummaasskk [ _n_n_n ]
	      The user file creation mask is set to the	octal value  _n_n_n  (see
	      _u_m_a_s_k(2)).   If _n_n_n is omitted, the current value	of the mask is
	      printed.

       wwaaiitt [_n]
	      Wait for the specified process and report	its  termination  sta-
	      tus.   If	 _n  is not given, all currently	active child processes
	      are waited for.  The return code from this command  is  that  of
	      the process waited for.

       IInnvvooccaattiioonn..
       If  the	first  character of argument zero is --,	commands are read from
       $$HHOOMMEE//..pprrooffiillee, if such a file  exists.	 Commands  are	then  read  as
       described below.	 The following flags are interpreted by	the shell when
       it is invoked.
       --cc _s_t_r_i_n_g  If the --cc flag is present, commands are read from _s_t_r_i_n_g_.
       --ss	  If the --ss flag is present or if  no  arguments  remain  then
		  commands  are	read from the standard input.  Shell output is
		  written to file descriptor 2.
       --ii	  If the --ii flag is present or if the shell input  and	output
		  are attached to a terminal (as told by _g_t_t_y) then this shell
		  is _i_n_t_e_r_a_c_t_i_v_e_.  In this case	the terminate  signal  SIGTERM
		  (see	_s_i_g_v_e_c(2))  is ignored (so that	'kill 0' does not kill
		  an interactive shell)	and the	 interrupt  signal  SIGINT  is
		  caught  and ignored (so that wwaaiitt is interruptible).	In all
		  cases	SIGQUIT	is ignored by the shell.

       The remaining flags and arguments are described under the sseett command.

FFIILLEESS
       $HOME/..profile
       /tmp/sh*
       /dev/null

SSEEEE AALLSSOO
       csh(1), test(1),	execve(2), environ(7)

DDIIAAGGNNOOSSTTIICCSS
       Errors detected by the shell, such as syntax errors cause the shell  to
       return a	non zero exit status.  If the shell is being used non interac-
       tively then execution of	the shell file is abandoned.   Otherwise,  the
       shell  returns  the  exit status	of the last command executed (see also
       eexxiitt).

BBUUGGSS
       If << is	used to	provide	standard  input	 to  an	 asynchronous  process
       invoked	by &, the shell	gets mixed up about naming the input document.
       A garbage file /tmp/sh* is created, and the shell complains  about  not
       being able to find the file by another name.



7th Edition			  May 5, 1986				 SH(1)
