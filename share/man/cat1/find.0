FIND(1)			    General Commands Manual		       FIND(1)



NNAAMMEE
       find - find files

SSYYNNOOPPSSIISS
       ffiinndd pathname-list expression
       ffiinndd pattern

DDEESSCCRRIIPPTTIIOONN
       In  the first form above, _f_i_n_d recursively descends the directory hier-
       archy for each pathname in the _p_a_t_h_n_a_m_e_-_l_i_s_t (i.e., one or  more	 path-
       names)  seeking	files  that  match a boolean _e_x_p_r_e_s_s_i_o_n	written	in the
       primaries given below.  In the descriptions, the	argument _n is used  as
       a  decimal integer where	_+_n means more than _n_, _-_n means less than _n and
       _n means exactly _n.

       The second form rapidly searches	a database  for	 all  pathnames	 which
       match  _p_a_t_t_e_r_n.	Usually	the database is	recomputed weekly and contains
       the pathnames of	all files which	are publicly accessible.  If  escaped,
       normal shell "globbing" characters (`*',	`?', `[', and ']') may be used
       in _p_a_t_t_e_r_n, but the matching differs in that no characters  (_e_._g_.  `/')
       have  to	 be  matched  explicitly.  As a	special	case, a	simple _p_a_t_t_e_r_n
       containing no globbing characters is matched as though  it  were	 _*_p_a_t_-
       _t_e_r_n_*; if any globbing character	appears	there are no implicit globbing
       characters.

       --nnaammee filename
		 True if the _f_i_l_e_n_a_m_e argument matches the current file	 name.
		 Normal	 shell	argument  syntax may be	used if	escaped	(watch
		 out for `[', `?' and `*').

       --ppeerrmm onum
		 True if the file permission flags  exactly  match  the	 octal
		 number	 _o_n_u_m  (see _c_h_m_o_d(1)).	If _o_n_u_m	is prefixed by a minus
		 sign, more flag bits (017777, see _s_t_a_t(2)) become significant
		 and the flags are compared: _(_f_l_a_g_s_&_o_n_u_m_)_=_=_o_n_u_m.

       --ttyyppee c	 True  if  the type of the file	is _c_, where _c is bb,, cc,, dd,, ff,, ll
		 or ss for block	special	file, character	special	 file,	direc-
		 tory, plain file, symbolic link, or socket.

       --lliinnkkss n	 True if the file has _n	links.

       --uusseerr uname
		 True  if  the	file  belongs to the user _u_n_a_m_e	(login name or
		 numeric user ID).

       --nnoouusseerr	 True if the file belongs to a user  _n_o_t  in  the  /etc/passwd
		 database.

       --ggrroouupp gname
		 True  if  the	file  belongs  to  group  _g_n_a_m_e	(group name or
		 numeric group ID).

       --nnooggrroouupp	 True if the file belongs to a group  _n_o_t  in  the  /etc/group
		 database.

       --ssiizzee n	 True if the file is _n blocks long (512	bytes per block).

       --iinnuumm n	 True if the file has inode number _n_.

       --aattiimmee n	 True if the file has been accessed in _n days.

       --mmttiimmee n	 True if the file has been modified in _n days.

       --eexxeecc command
		 True  if  the	executed  command returns a zero value as exit
		 status.  The end of the command  must	be  punctuated	by  an
		 escaped  semicolon.   A  command argument `{}'	is replaced by
		 the current pathname.

       --ookk command
		 Like --eexxeecc except that	the generated command  is  written  on
		 the  standard output, then the	standard input is read and the
		 command executed only upon response yy.

       --pprriinntt	 Always	true; causes the current pathname to be	printed.

       --llss	 Always	true; causes current pathname to be  printed  together
		 with its associated statistics.  These	include	(respectively)
		 inode number, size  in	 kilobytes  (1024  bytes),  protection
		 mode,	number	of hard	links, user, group, size in bytes, and
		 modification time.  If	the file is a special  file  the  size
		 field	will  instead  contain the major and minor device num-
		 bers.	If the file is a symbolic link	the  pathname  of  the
		 linked-to  file is printed preceded by	``->''.	 The format is
		 identical to that of ``ls -gilds'' (note however that format-
		 ting is done internally, without executing the	ls program).

       --nneewweerr file
		 True if the current file has been modified more recently than
		 the argument _f_i_l_e_.

       --ccppiioo file
		 Write the current file	on the argument	_f_i_l_e in	_c_p_i_o format.

       --xxddeevv	 Always	true; causes find _n_o_t to traverse  down	 into  a  file
		 system	different from the one on which	current	_a_r_g_u_m_e_n_t path-
		 name resides.

       The primaries may be combined using the following operators  (in	 order
       of decreasing precedence):

       1)  A  parenthesized  group of primaries	and operators (parentheses are
	   special to the Shell	and must be escaped).

       2)  The negation	of a primary (`!' is the unary _n_o_t operator).

       3)  Concatenation of primaries (the _a_n_d operation  is  implied  by  the
	   juxtaposition of two	primaries).

       4)  Alternation of primaries (`--oo' is the _o_r operator).

EEXXAAMMPPLLEESS
       To find all accessible files whose pathname contains `find':

	      find find

       To typeset all variants of manual pages for `ls':

	      vtroff -man `find	'*man*/ls.?'`

       To  remove all files named `a.out' or `*.o' that	have not been accessed
       for a week:

	 find /	\( -name a.out -o -name	'*.o' \) -atime	+7 -exec rm {} \;

FFIILLEESS
       /etc/passwd
       /etc/group
       /var/db/find.codes     coded pathnames database

SSEEEE AALLSSOO
       sh(1), test(1), fs(5)
       Relevant	paper in February, 1983	issue of _;_l_o_g_i_n_:_.

BBUUGGSS
       The first form's	syntax is painful, and the second form's exact	seman-
       tics is confusing and can vary from site	to site.

       More than one `-newer' option does not work properly.



7th Edition		       October 11, 1996			       FIND(1)
