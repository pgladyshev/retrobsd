ADB(1)			    General Commands Manual			ADB(1)



NNAAMMEE
       adb - debugger (2BSD)

SSYYNNOOPPSSIISS
       aaddbb [--ww]	[ --kk ] [ --IIdir ] [ objfil [ corfil ] ]

DDEESSCCRRIIPPTTIIOONN
       _A_d_b  is a general purpose debugging program.  It	may be used to examine
       files and to provide a controlled environment for the execution of UNIX
       programs.

       _O_b_j_f_i_l  is normally an executable program file, preferably containing a
       symbol table; if	not then the symbolic features of _a_d_b cannot  be  used
       although	 the  file  can	 still be examined.  The default for _o_b_j_f_i_l is
       aa..oouutt..  _C_o_r_f_i_l is assumed to be a core image file produced  after  exe-
       cuting _o_b_j_f_i_l; the default for _c_o_r_f_i_l is	ccoorree..

       Requests	 to  _a_d_b are read from the standard input and responses	are to
       the standard output.  If	the --ww flag is present then  both  _o_b_j_f_i_l  and
       _c_o_r_f_i_l  are  created if necessary and opened for	reading	and writing so
       that files can be modified using	_a_d_b.

       The --kk option makes _a_d_b do UNIX kernel memory  mapping;	it  should  be
       used when _c_o_r_e is a UNIX	crash dump or _/_d_e_v_/_m_e_m.

       The  --II	option specifies a directory where files to be read with $< or
       $<< (see	below) will be sought; the default is _/_u_s_r_/_s_h_a_r_e_/_a_d_b.

       _A_d_b ignores QUIT; INTERRUPT causes return to the	next _a_d_b command.

       In general requests to _a_d_b are of the form

		[_a_d_d_r_e_s_s]  [, _c_o_u_n_t] [_c_o_m_m_a_n_d] [;]

       If _a_d_d_r_e_s_s is present then _d_o_t is set to	_a_d_d_r_e_s_s.  Initially _d_o_t	is set
       to  0.	For  most  commands _c_o_u_n_t specifies how	many times the command
       will be executed.  The default _c_o_u_n_t  is	 1.   _A_d_d_r_e_s_s  and  _c_o_u_n_t  are
       expressions.

       The  interpretation of an address depends on the	context	it is used in.
       If a subprocess is being	debugged then addresses	are interpreted	in the
       usual  way in the address space of the subprocess.  For further details
       of address mapping see ADDRESSES.

EEXXPPRREESSSSIIOONNSS
       ..      The value	of _d_o_t.

       +      The value	of _d_o_t incremented by the current increment.

       ^      The value	of _d_o_t decremented by the current increment.

       "      The last _a_d_d_r_e_s_s typed.

       _i_n_t_e_g_e_r
	      An octal number if _i_n_t_e_g_e_r begins	with a 0; a hexadecimal	number
	      if  preceded  by	##;  otherwise  a decimal number.  This default
	      interpretation of	integers may be	changed	via the	$o and $d com-
	      mands.

       _i_n_t_e_g_e_r.._f_r_a_c_t_i_o_n
	      A	32 bit floating	point number.

       _'_c_c_c_c_' The  ASCII value of up to	4 characters.  \ may be	used to	escape
	      a	'.

       _< _n_a_m_e The value	of _n_a_m_e, which is either a variable name or a register
	      name.  _A_d_b maintains a number of variables (see VARIABLES) named
	      by single	letters	or digits.  If _n_a_m_e is a  register  name  then
	      the  value of the	register is obtained from the system header in
	      _c_o_r_f_i_l.  The register names are those printed by the $r command.

       _s_y_m_b_o_l A	_s_y_m_b_o_l is a sequence of	upper or lower	case  letters,	under-
	      scores  or  digits,  not	starting  with a digit.	 The backslash
	      character	\\ may be used to escape	other characters.   The	 value
	      of the _s_y_m_b_o_l is taken from the symbol table in _o_b_j_f_i_l.  An ini-
	      tial _ or	~ will be prepended to _s_y_m_b_o_l if needed.  If the  sym-
	      bol  is a	text symbol and	_o_b_j_f_i_l is an overlay type, the default
	      is _~_s_y_m_b_o_l, which	is the subroutine itself, not the entry	inter-
	      face in the base segment.

       __ _s_y_m_b_o_l
	      In  C,  the `true	name' of an external symbol begins with	_.  It
	      may be necessary to utter	 this  name  to	 distinguish  it  from
	      internal	or hidden variables of a program.  For a subroutine in
	      an overlay, _~_s_y_m_b_o_l is the actual	subroutine, and	___s_y_m_b_o_l	is the
	      entry  point  in	the  base segment (the "thunk").  Note that to
	      explicitly specify the local name, the ~ must be preceeded by  a
	      backslash,  since	~ is the bitwise complement operator: _\_~_s_y_m_b_o_l
	      must be typed.

       _r_o_u_t_i_n_e.._n_a_m_e
	      The address of the variable _n_a_m_e in  the	specified  C  routine.
	      Both _r_o_u_t_i_n_e and _n_a_m_e are	_s_y_m_b_o_l_s.  If _n_a_m_e is omitted the value
	      is the address of	the most recently activated C stack frame cor-
	      responding to _r_o_u_t_i_n_e.

       (_e_x_p)  The value	of the expression _e_x_p.

       MMoonnaaddiicc ooppeerraattoorrss

       *_e_x_p   The contents of the location addressed by	_e_x_p in _c_o_r_f_i_l.

       @_e_x_p   The contents of the location addressed by	_e_x_p in _o_b_j_f_i_l.

       -_e_x_p   Integer negation.

       ~_e_x_p   Bitwise complement.

       DDyyaaddiicc ooppeerraattoorrss	are left associative and are less binding than monadic
       operators.

       _e_1+_e_2  Integer addition.

       _e_1-_e_2  Integer subtraction.

       _e_1*_e_2  Integer multiplication.

       _e_1%_e_2  Integer division.

       _e_1&_e_2  Bitwise conjunction.

       _e_1|_e_2  Bitwise disjunction.

       _e_1#_e_2  _E_1 rounded up to the next	multiple of _e_2.

CCOOMMMMAANNDDSS
       Most commands consist of	a verb followed	by a modifier or list of modi-
       fiers.	The  following verbs are available.  (The commands `?' and `/'
       may be followed by `*'; see ADDRESSES for further details.)

       ?_f   Locations starting at _a_d_d_r_e_s_s in _o_b_j_f_i_l are	printed	 according  to
	    the	format _f.  _d_o_t is incremented by the sum of the	increments for
	    each format	letter (q.v.).

       /_f   Locations starting at _a_d_d_r_e_s_s in _c_o_r_f_i_l are	printed	 according  to
	    the	format _f and _d_o_t is incremented	as for `?'.

       =_f   The	 value of _a_d_d_r_e_s_s itself is printed in the styles indicated by
	    the	format _f.  (For	ii format `?' is	printed	for the	parts  of  the
	    instruction	that reference subsequent words.)

       A  _f_o_r_m_a_t  consists  of	one or more characters that specify a style of
       printing.  Each format character	may be preceded	by a  decimal  integer
       that  is	 a  repeat  count  for	the  format character.	While stepping
       through a format	_d_o_t is incremented temporarily by the amount given for
       each  format  letter.   If  no  format is given then the	last format is
       used.  The format letters available are as follows.

	      oo	2    Print 2 bytes in octal.  All octal	numbers	output by  _a_d_b
		     are preceded by 0.
	      OO	4    Print 4 bytes in octal.
	      qq	2    Print in signed octal.
	      QQ	4    Print long	signed octal.
	      dd	2    Print in decimal.
	      DD	4    Print long	decimal.
	      xx	2    Print 2 bytes in hexadecimal.
	      XX	4    Print 4 bytes in hexadecimal.
	      uu	2    Print as an unsigned decimal number.
	      UU	4    Print long	unsigned decimal.
	      ff	4    Print the 32 bit value as a floating point	number.
	      FF	8    Print double floating point.
	      bb	1    Print the addressed byte in octal.
	      cc	1    Print the addressed character.
	      CC	1    Print  the	addressed character using the following	escape
		     convention.  the standard escape convention where control
		     characters	 are printed as	^X and the delete character is
		     printed as	^?.
	      ss	_n    Print the addressed characters until a zero character  is
		     reached.
	      SS	_n    Print  a  string  using  the  ^_X escape convention	(see CC
		     above).  _n	is the length of the string including its zero
		     terminator.
	      YY	4    Print 4 bytes in date format (see _c_t_i_m_e(3)).
	      ii	n    Print  as machine instructions.  _n	is the number of bytes
		     occupied by the  instruction.   This  style  of  printing
		     causes variables 1	and 2 to be set	to the offset parts of
		     the source	and destination	respectively.
	      aa	0    Print the value of	_d_o_t in	symbolic  form.	  Symbols  are
		     checked  to  ensure that they have	an appropriate type as
		     indicated below.

		/  local or global data	symbol
		?  local or global text	symbol
		=  local or global absolute symbol

	      pp	2    Print the addressed value in symbolic form	using the same
		     rules for symbol lookup as	aa.
	      tt	0    When  preceded by an integer tabs to the next appropriate
		     tab stop.	For example, 88tt	moves to the next 8-space  tab
		     stop.
	      rr	0    Print a space.
	      nn	0    Print a newline.
	      ""......"" 0
		     Print the enclosed	string.
	      ^^	     _D_o_t  is decremented by the	current	increment.  Nothing is
		     printed.
	      +	     _D_o_t is incremented	by 1.  Nothing is printed.
	      -	     _D_o_t is decremented	by 1.  Nothing is printed.

       newline
	      If the previous command temporarily incremented  _d_o_t,  make  the
	      increment	 permanent.   Repeat the previous command with a _c_o_u_n_t
	      of 1.

       [??//]ll _v_a_l_u_e _m_a_s_k
	      Words starting at	_d_o_t are	masked with  _m_a_s_k  and	compared  with
	      _v_a_l_u_e  until  a  match is	found.	If LL is	used then the match is
	      for 4 bytes at a time instead of 2.  If no match is  found  then
	      _d_o_t  is unchanged; otherwise _d_o_t is set to the matched location.
	      If _m_a_s_k is omitted then -1 is used.

       [??//]ww _v_a_l_u_e _._._.
	      Write the	2-byte _v_a_l_u_e into the addressed	location.  If the com-
	      mand  is	WW,  write 4 bytes.  Odd	addresses are not allowed when
	      writing to the subprocess	address	space.

       [??//]mm _b_1	_e_1 _f_1[??//]
	      New values for (_b_1_, _e_1_, _f_1) are recorded.	 If  less  than	 three
	      expressions are given then the remaining map parameters are left
	      unchanged.  If the `?' or	`/' is followed	by `*' then  the  last
	      segment  (_b_2,_e_2,_f_2)  of  the mapping is changed.	If the list is
	      terminated by `?'	or `/' then the	file (_o_b_j_f_i_l or	_c_o_r_f_i_l respec-
	      tively) is used for subsequent requests.	(So that, for example,
	      `/m?' will cause `/' to refer to _o_b_j_f_i_l.)

       >>_n_a_m_e  _D_o_t is assigned to the variable or register named.

       !!      A	shell (/bin/sh)	is called to read the rest of the line follow-
	      ing `!'.

       $_m_o_d_i_f_i_e_r
	      Miscellaneous commands.  The available _m_o_d_i_f_i_e_r_s are:

	      <<_f     Read  commands  from the file _f.  If this command is exe-
		     cuted in a	file, further commands in  the	file  are  not
		     seen.   If	_f is omitted, the current input	stream is ter-
		     minated.  If a _c_o_u_n_t is given, and	is zero,  the  command
		     will  be  ignored.	 The value of the count	will be	placed
		     in	variable _9 before the first command in _f is executed.
	      <<<<_f    Similar to	<< except it can	be used	in a file of  commands
		     without  causing  the  file  to be	closed.	 Variable _9 is
		     saved during the execution	of this	command, and  restored
		     when  it  completes.   There is a (small) finite limit to
		     the number	of <<<< files that can be	open at	once.
	      >>_f     Append output to the file _f, which	is created if it  does
		     not  exist.   If  _f is omitted, output is returned	to the
		     terminal.
	      ??	     Print process id, the signal  which  caused  stoppage  or
		     termination, as well as the registers as $$rr.  This	is the
		     default if	_m_o_d_i_f_i_e_r is omitted.
	      rr	     Print the general registers and the instruction addressed
		     by	ppcc.  _D_o_t is set	to ppcc.
	      ff	     Print  the	floating registers in single or	double length.
		     If	the floating point status of ppss	is set to double (0200
		     bit) then double length is	used anyway.
	      bb	     Print  all	 breakpoints  and  their associated counts and
		     commands.
	      aa	     ALGOL 68 stack backtrace.	If _a_d_d_r_e_s_s is given then it is
		     taken  to be the address of the current frame (instead of
		     rr44).  If _c_o_u_n_t is given then only the first _c_o_u_n_t	frames
		     are printed.
	      cc	     C	stack backtrace.  If _a_d_d_r_e_s_s is	given then it is taken
		     as	the address of the current frame instead of  the  con-
		     tents  of	the frame-pointer register.  If	CC is used then
		     the names and (16 bit) values of all automatic and	static
		     variables are printed for each active function.  If _c_o_u_n_t
		     is	given then only	the first _c_o_u_n_t	frames are printed.
	      ee	     The names and values of external variables	are printed.
	      ww	     Set the page width	for output to _a_d_d_r_e_s_s (default 80).
	      ss	     Set the limit for	symbol	matches	 to  _a_d_d_r_e_s_s  (default
		     255).
	      oo	     All integers input	are regarded as	octal.
	      dd	     Reset integer input as described in EXPRESSIONS.
	      qq	     Exit from _a_d_b.
	      vv	     Print all non zero	variables in octal.
	      mm	     Print the address map.

       ::_m_o_d_i_f_i_e_r
	      Manage a subprocess.  Available modifiers	are:

	      bb_c     Set  breakpoint  at  _a_d_d_r_e_s_s.   If	_o_b_j_f_i_l is overlaid and
		     _a_d_d_r_e_s_s is	in the overlay region, the breakpoint  is  set
		     in	 the  overlay  of  the symbol mentioned	if _a_d_d_r_e_s_s was
		     given symbolically, otherwise it is set  in  the  current
		     overlay (that in variable c).  The	breakpoint is executed
		     _c_o_u_n_t-1 times before  causing  a  stop.   Each  time  the
		     breakpoint	 is encountered	the command _c is executed.  If
		     this command is omitted or	sets  _d_o_t  to  zero  then  the
		     breakpoint	causes a stop.

	      dd	     Delete breakpoint at _a_d_d_r_e_s_s.

	      rr	     Run  _o_b_j_f_i_l as a subprocess.  If _a_d_d_r_e_s_s is given explic-
		     itly then the program is entered at this point; otherwise
		     the  program  is  entered	at  its	 standard entry	point.
		     _c_o_u_n_t specifies how many breakpoints are  to  be  ignored
		     before stopping.  Arguments to the	subprocess may be sup-
		     plied on the same	line  as  the  command.	  An  argument
		     starting  with < or > causes the standard input or	output
		     to	be established for the command.

	      cc_s     The subprocess is continued with signal _s_,	see _s_i_g_v_e_c(2).
		     If	 _a_d_d_r_e_s_s  is given then	the subprocess is continued at
		     this address.  If no signal is specified then the	signal
		     that  caused  the subprocess to stop is sent.  Breakpoint
		     skipping is the same as for rr.

	      ss_s     As	for cc except that the  subprocess  is  single  stepped
		     _c_o_u_n_t times.  If there is no current subprocess then _o_b_j_-
		     _f_i_l is run	as a subprocess	as for rr.   In	this  case  no
		     signal  can be sent; the remainder	of the line is treated
		     as	arguments to the subprocess.

	      kk	     The current subprocess, if	any, is	terminated.

VVAARRIIAABBLLEESS
       _A_d_b provides a number of	variables.  Named variables are	set  initially
       by  _a_d_b	but  are not used subsequently (except for c).	Numbered vari-
       ables are reserved for communication as follows.

       0      The last value printed.
       1      The last offset part of an instruction source.
       2      The previous value of variable 1.
       9      The count	on the last $< or $<< command.

       On entry	the following are set from the system header  in  the  _c_o_r_f_i_l.
       If  _c_o_r_f_i_l  does	not appear to be a ccoorree	file then these	values are set
       from _o_b_j_f_i_l.

       b      The base address of the data segment.
       c      The current overlay.  This is set	from _c_o_r_f_i_l, and in turn  sets
	      the  overlay  map.   This	variable and the map may be changed by
	      referring	to other overlays symbolically (e.g. by	examining text
	      in  subroutines  in other	overlays), using the $r	command	(which
	      resets c from the	core file), or explicitly  (with  the  command
	      >c).
       d      The data segment size.
       e      The entry	point.
       m      The  `magic' number (0405, 0407, 0410, 0411, 0430	or 0431).  The
	      object is	overlaid if m is 0430 or 0431.
       o      The sum of the overlay segment sizes (if overlaid).
       s      The stack	segment	size.
       t      The text segment size.

AADDDDRREESSSSEESS
       The address in a	file associated	with a written address	is  determined
       by a mapping associated with that file.	Each mapping is	represented by
       two or three triples (_b_1_, _e_1_, _f_1), (_b_o_, _e_o_,  _f_o)	 for  overlaid	object
       files, and (_b_2_, _e_2_, _f_2) and the _f_i_l_e _a_d_d_r_e_s_s corresponding to a written
       _a_d_d_r_e_s_s is calculated as	follows.

	_b_1<=_a_d_d_r_e_s_s<_e_1 => _f_i_l_e _a_d_d_r_e_s_s=_a_d_d_r_e_s_s+_f_1_-_b_1_, otherwise,

       if overlaid,
	_b_o<=_a_d_d_r_e_s_s<_e_o => _f_i_l_e _a_d_d_r_e_s_s=_a_d_d_r_e_s_s+_f_o_-_b_o_, otherwise,

	_b_2<=_a_d_d_r_e_s_s<_e_2 => _f_i_l_e _a_d_d_r_e_s_s=_a_d_d_r_e_s_s+_f_2_-_b_2_,

       otherwise, the requested	_a_d_d_r_e_s_s	is not legal.  In some cases (e.g. for
       programs	 with separated	I and D	space) the two segments	for a file may
       overlap.	 If a ??	 or // is followed by an	** then only the	last triple is
       used.

       The  initial  setting of	both mappings is suitable for normal aa..oouutt and
       ccoorree files.  If the object file is not of the kind expected  then,  for
       both  files,  _b_1	is set to 0, _e_1	is set to the maximum file size	and _f_1
       is set to 0; in this way	the whole file can be examined with no address
       translation.

       So  that	_a_d_b may	be used	on large files all appropriate values are kept
       as signed 32 bit	integers.

FFIILLEESS
       a.out
       core

SSEEEE AALLSSOO
       cc(1), ptrace(2), a.out(5), core(5)
       _A_D_B _- _A _T_u_t_o_r_i_a_l, S. R. Bourne

DDIIAAGGNNOOSSTTIICCSS
       `Adb' when there	is no current command or format.  Comments about inac-
       cessible	 files,	 syntax	errors,	abnormal termination of	commands, etc.
       Exit status is 0, unless	last command failed or returned	 nonzero  sta-
       tus.

BBUUGGSS
       When single stepping, system calls do not count as an executed instruc-
       tion.
       Local variables whose names are the same	as an  external	 variable  may
       foul up the accessing of	the external.
       Local variables cannot be accessed in routines that are in overlays.
       Since no	shell is invoked to interpret the arguments of the ::rr command,
       the customary wild-card and variable expansions cannot occur.



3rd Berkeley Distribution      October 21, 1996				ADB(1)
