CC(1)			    General Commands Manual			 CC(1)



NNAAMMEE
       cc - C compiler (2BSD)

SSYYNNOOPPSSIISS
       cccc [ option ] ... file ...

DDEESSCCRRIIPPTTIIOONN
       _C_c is the UNIX C	compiler.  _C_c accepts several types of arguments:

       Arguments  whose	names end with `.c' are	taken to be C source programs;
       they are	compiled, and each object program is left on  the  file	 whose
       name  is	 that  of the source with `.o' substituted for `.c'.  The `.o'
       file is normally	deleted, however, if a single C	 program  is  compiled
       and loaded all at one go.

       In  the	same  way, arguments whose names end with `.s' are taken to be
       assembly	source programs	and are	assembled, producing a `.o' file.

       The following options are interpreted by	_c_c.  See _l_d(1)	for  load-time
       options.

       --cc      Suppress	 the  loading  phase  of the compilation, and force an
	       object file to be produced even if only	one  program  is  com-
	       piled.

       --ww      Suppress	warning	diagnostics.

       --pp      Arrange	for the	compiler to produce code which counts the num-
	       ber of times each routine is called.  If	loading	 takes	place,
	       replace the standard startup routine by one which automatically
	       calls _m_o_n_i_t_o_r(3)	at the start  and  arranges  to	 write	out  a
	       _m_o_n_._o_u_t	file  at normal	termination of execution of the	object
	       program.	 An execution profile can then be generated by use  of
	       _p_r_o_f(1).

       --OO      Invoke an object-code improver.

       --SS      Compile	the named C programs, and leave	the assembler-language
	       output on corresponding files suffixed `.s'.

       --MM      Run only	the  macro  preprocessor  on  the  named  C  programs,
	       requesting  it  to  generate Makefile dependencies and send the
	       result to the standard output.

       --EE      Run only	the macro preprocessor on the named  C	programs,  and
	       send the	result to the standard output.

       --CC      prevent the macro preprocessor from eliding comments.

       --oo _o_u_t_p_u_t
	       Name  the final output file _o_u_t_p_u_t.  If this option is used the
	       file `a.out' will be left undisturbed.

       --DD_n_a_m_e_=_d_e_f
       --DD_n_a_m_e  Define the _n_a_m_e to the preprocessor, as if by `#define'.	 If no
	       definition is given, the	name is	defined	as "1".

       --UU_n_a_m_e  Remove any initial definition of	_n_a_m_e.

       --II_d_i_r   `#include'  files  whose	names do not begin with	`/' are	always
	       sought first in the directory of	the  _f_i_l_e  argument,  then  in
	       directories named in --II options,	then in	directories on a stan-
	       dard list.

       --LL_d_i_r   Library archives	are sought first in directories	 named	in  --LL
	       options,	then in	directories on a standard list.

       --BB_s_t_r_i_n_g
	       Find  substitute	compiler passes	in the files named _s_t_r_i_n_g with
	       the suffixes cpp, c0, c1	and c2.	 If _s_t_r_i_n_g  is	empty,	use  a
	       standard	backup version.

       --tt[pp001122]
	       Find  only  the	designated  compiler passes in the files whose
	       names are constructed by	a --BB option.  In the absence of	 a  --BB
	       option, the _s_t_r_i_n_g is taken to be `/usr/c/'.

       Other  arguments	 are taken to be either	loader option arguments, or C-
       compatible object programs, typically produced by an earlier _c_c run, or
       perhaps	libraries  of C-compatible routines.  These programs, together
       with the	results	of any compilations  specified,	 are  loaded  (in  the
       order given) to produce an executable program with name aa..oouutt..

FFIILLEESS
       file.c	     input file
       file.o	     object file
       a.out	     loaded output
       /tmp/ctm?     temporary
       /lib/cpp	     preprocessor
       /lib/c[01]    compiler
       /lib/c2	     optional optimizer
       /lib/crt0.o   runtime startoff
       /lib/mcrt0.o  startoff for profiling
       /lib/libc.a   standard library, see _i_n_t_r_o(3)
       /usr/lib/libc_p.aprofiling library, see _i_n_t_r_o(3)
       /usr/include  standard directory	for `#include' files
       mon.out	     file produced for analysis	by _p_r_o_f(1)

SSEEEE AALLSSOO
       B.  W.  Kernighan  and D. M. Ritchie, _T_h_e _C _P_r_o_g_r_a_m_m_i_n_g _L_a_n_g_u_a_g_e_, Pren-
       tice-Hall, 1978
       B. W. Kernighan,	_P_r_o_g_r_a_m_m_i_n_g _i_n _C_-_-_a _t_u_t_o_r_i_a_l
       D. M. Ritchie, _C	_R_e_f_e_r_e_n_c_e _M_a_n_u_a_l
       monitor(3), prof(1), adb(1), ld(1), as(1)

DDIIAAGGNNOOSSTTIICCSS
       The diagnostics produced	by C itself are	intended to  be	 self-explana-
       tory.  Occasional messages may be produced by the assembler or loader.

BBUUGGSS
       The compiler currently ignores advice to	put cchhaarr, uunnssiiggnneedd cchhaarr, lloonngg,
       ffllooaatt, or ddoouubbllee	variables in registers.



3rd Berkeley Distribution	 June 7, 1985				 CC(1)
