LD(1)			    General Commands Manual			 LD(1)



NNAAMMEE
       ld - link editor	(2BSD)

SSYYNNOOPPSSIISS
       lldd [ option ] ... file ...

DDEESSCCRRIIPPTTIIOONN
       _L_d  combines several object programs into one, resolves external	refer-
       ences, and searches libraries.  In the  simplest	 case  several	object
       _f_i_l_e_s are given,	and _l_d combines	them, producing	an object module which
       can be either executed or become	the input for a	further	_l_d  run.   (In
       the latter case,	the --rr option must be given to preserve	the relocation
       bits.)  The output of _l_d	is left	on aa..oouutt.   This  file	is  made  exe-
       cutable only if no errors occurred during the load.

       The  argument  routines	are  concatenated in the order specified.  The
       entry point of the output is the	beginning of the first routine (unless
       the --ee option is	specified).

       If  any argument	is a library, it is searched exactly once at the point
       it is encountered in the	argument list.	Only those  routines  defining
       an  unresolved  external	 reference  are	 loaded.   If a	routine	from a
       library references another routine in the library, and the library  has
       not  been  processed  by	 _r_a_n_l_i_b(1), the	referenced routine must	appear
       after the referencing routine in	the library.  Thus the order  of  pro-
       grams within libraries may be important.	 The first member of a library
       should be a file	named `__.SYMDEF', which is understood to be a dictio-
       nary  for  the  library	as  produced  by  _r_a_n_l_i_b(1); the dictionary is
       searched	iteratively to satisfy as many references as possible.

       The symbols `_etext', `_edata' and `_end' (`etext', `edata'  and	 `end'
       in  C)  are reserved, and if referred to, are set to the	first location
       above the program, the first location above initialized data,  and  the
       first  location above all data respectively.  It	is erroneous to	define
       these symbols.

       _L_d understands several options.	Except	for  --ll,  they	should	appear
       before the file names.

       --DD     Take the next argument as	a decimal number and pad the data seg-
	      ment with	zero bytes to the indicated length.

       --dd     Force definition of common  storage  even	 if  the  --rr  flag  is
	      present.

       --ee     The  following  argument	is  taken  to be the name of the entry
	      point of the loaded program; location 0 is the default.

       --LL_d_i_r  Add _d_i_r to the  list  of	directories  in	 which	libraries  are
	      searched for.  Directories specified with	--LL are searched	before
	      the standard directories.

       --ll_x    This option is an	abbreviation for the  library  name  `lib_x.a',
	      where  _x	is  a  string.	_L_d searches for	libraries first	in any
	      directories specified with --LL  options,  then  in	 the  standard
	      directories `/lib', `/usr/lib', and `/usr/local/lib'.  A library
	      is searched when its name	is encountered,	so the placement of  a
	      --ll is significant.

       --MM     produce  a  primitive  load  map,	listing	the names of the files
	      which will be loaded.

       --nn     Arrange (by giving the output file a 0410	"magic	number")  that
	      when the output file is executed,	the text portion will be read-
	      only and shared  among  all  users  executing  the  file.	  This
	      involves	moving the data	areas up to the	first possible 8K byte
	      boundary following the end of the	text.  This option  creates  a
	      `pure executable'	format.

       --ii     When  the	 output	 file  is  executed, the program text and data
	      areas will live in separate address spaces.  The only difference
	      between  this  option and	--nn is that here	the text and data seg-
	      ments are	in separate address spaces and both start at  location
	      0.  This option creates a	`separate executable' format.

       --zz     This  option  is	a synonym for the --ii option.  On other systems
	      (4.3BSD for example) the --zz option causes	a  demand  paged  exe-
	      cutable  to  be built.  This option was added to 2.11BSD because
	      some systems (those which	use gcc) do not	safely ignore (with  a
	      warning)	the --ii option.	Adding the --zz option to	2.11BSD	allows
	      makefiles	to be copied freely between  multiple  platforms  once
	      again.

       --OO     This  is	a text replacement overlay file; only the text segment
	      will be replaced by _e_x_e_c_v_e(2).  Shared data must have  the  same
	      size as the program overlaid, otherwise the _e_x_e_c_v_e(2) will fail.
	      The entry	point to the  overlay  may  be	defined	 with  the  --ee
	      option.	This option allows the creation	of a `replacement exe-
	      cutable' format.

       --oo     The _n_a_m_e argument	after --oo is used as the	name of	the _l_d	output
	      file, instead of aa..oouutt.

       --rr     Generate	relocation  bits  in the output	file so	that it	can be
	      the subject of another _l_d	run.  This flag	 also  prevents	 final
	      definitions  from	 being given to	common symbols,	and suppresses
	      the `undefined symbol' diagnostics.  (Note that this option can-
	      not be used with overlays	(--ZZ) since they	cannot be reloaded.)

       --ss     `Strip' the output, that is, remove the symbol table and reloca-
	      tion bits	to save	space (but impair the usefulness of the	debug-
	      gers).  This information can also	be removed by _s_t_r_i_p(1).

       --qq     ("quiet")	Suppress the reporting of undefined symbols.  Normally
	      only used	when building networked	kernels	- the large number  of
	      undefined	symbols	is normal (due to the three phase link procee-
	      dure) but	can be distracting none	the less.

       --tt     ("trace")	 Print the name	of each	file as	it is processed.

       --uu     Take the following argument as a symbol and enter	 it  as	 unde-
	      fined  in	 the  symbol table.  This is useful for	loading	wholly
	      from a library, since initially the symbol table is empty	and an
	      unresolved reference is needed to	force the loading of the first
	      routine.

       --vv     ("verbose")  Print the VM	statistics.  Printing out  the	number
	      of pages swapped to and from the VM tmp file is now optional and
	      only used	when a problem is suspected (or	if you	are  voyeuris-
	      tic).

       --XX     Save  local symbols except for those whose names begin with `L'.
	      This option is used by  _c_c(1)  to	 discard  internally-generated
	      labels while retaining symbols local to routines.

       --xx     Do  not preserve local (non-.globl) symbols in the output	symbol
	      table; only enter	external  symbols.   This  option  saves  some
	      space  in	 the output file.  It also allows temporary labels  to
	      be discarded to prevent redefinition in sucessive	 lldd's.	 Warn-
	      ing:  _a_d_b	 uses  these  local symbols, especially	when debugging
	      overlaid programs, so some debugging information is  necessarily
	      lost if this option is used.

       --ZZ     Indicate	the creation of	an automatic-overlay format.  In addi-
	      tion a --ii	or --nn must be  present	as  overlays  only  work  with
	      shared  text objects.  Repeated instances	of --ZZ bracket the mod-
	      ules that	will be	loaded into a given overlay.   Modules	before
	      the  first --ZZ or after the concluding --YY will be loaded into the
	      non-overlaid text	(base) area.  Note that	there may be a maximum
	      of  NOVL	(currently  15)	 overlays.   This  option produces the
	      `overlaid	pure  executable'  and	the  `overlaid	separate  exe-
	      cutable' formats.	 The loader creates a small entry interface in
	      the base segment for each	subroutine in an overlay.  This	inter-
	      face  ("thunk")  arranges	 for the correct overlay to be present
	      before the actual	routine	is entered.

       --YY     Terminate	text overlays.	This allows any	remaining  modules  or
	      libraries	 to  be	 loaded	 into the base area.  Note that	the --YY
	      option used to be	_-_L, but	had to be changed when the loader  was
	      brought up to date with the _4_._3_B_S_D loader	which uses _-_L to indi-
	      cate a directory to be searched for library references.

AAUUTTOOMMAATTIICC TTEEXXTT OOVVEERRLLAAYY EEXXAAMMPPLLEE
       To set up an automatic text overlay object with the loader, use a  com-
       mand of the form:

	      lldd --nn --XX /lib/crt0.o base.o base2.o
	      --ZZ ov1a.o	ov1b.o ...
	      --ZZ ov2a.o	ov2b.o ...
	      --YY base3.o ... -lovc

       Assembly	 source	 code  must  be	 compiled  using the assembler overlay
       flags: "_a_s _-_V prog.s" which causes the assembler	to leave certain  sym-
       bols unresolved so that _l_d may rearrange	them.  The various system com-
       pilers automatically use	this option.

       When arranging modules into overlays, the following rules  control  the
       maximum sizes for an executable file.  The magic	numbers	are due	to the
       granularity of PDP-11 segmentation registers (there  are	 8  registers,
       each controlling	an 8192-byte segment).	The program is made up of four
       areas: base text, overlay text, data + bss, and	stack  sections.   The
       size of the overlay section is controlled by the	size of	the largest of
       the overlays.  Each section starts at an	address	that is	a multiple  of
       8Kb, thus the size of each section is rounded up	to a multiple of 8Kb.

       In  the	case of	separate overlaid executable files, the	text and over-
       lays share one 64Kb byte	address	space; and the data +  bss  and	 stack
       share  the other.  Thus,	the total of the base text size	(rounded up to
       an 8Kb boundary)	plus the maximum overlay size (similarly rounded) must
       be  less	 than  or equal	to 64Kb.  Or, put another way, since there are
       only 8 segmentation registers available,	 the  number  of  segmentation
       registers  needed  for an overlaid object must be less than or equal to
       8.  As an example, if the base text segment has	36800  bytes  and  the
       largest	overlay	 takes	14144, the base	will fit in 5 segments and the
       overlays	in 2 segments;	leaving	 one  to  spare.   The	data  and  bss
       together	 must  fit  in 7 segments (56K bytes), leaving one 8Kb segment
       for the stack.  All of the limits can be	checked	by using _c_h_e_c_k_o_b_j(1).

       For pure	overlaid programs, the rules are similar except	that all  four
       sections	 share	one  64K-byte  address	space.	The number of segments
       required	by the text, overlay, data + bss and stack are	calculated  in
       the  same way.  The sum of the segments required, including one for the
       stack, must be less than	or equal to 8.	Example: a  program  has  8128
       bytes  of  base	text, the largest overlay is 16248 bytes, and the data
       and bss total 19500.  The text requires 1 8Kb segment, the overlays  2,
       and data	and bss	use 4, leaving one for the stack.

FFIILLEESS
       /lib/lib*.a	      libraries
       /usr/lib/lib*.a	      more libraries
       /usr/local/lib/lib*.a  still more libraries
       a.out		      output file

SSEEEE AALLSSOO
       adb(1),	ar(1),	as(1), cc(1), checkobj(1), f77(1), file(1), ranlib(1),
       size(1),	a.out(5)

BBUUGGSS
       The text	overlay	scheme presented is unique to  the  PDP-11  and	 2BSD.
       The -i, -P, -Z, -Y options are specific to 2BSD.	 The -q	and -v options
       are new with 2.11BSD.



3rd Berkeley Distribution	 May 08, 1995				 LD(1)
